<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android逆向之某东到家djencrypt</title>
    <url>/2022/03/31/JDDJ/</url>
    <content><![CDATA[<h4 id="抓包-charles-SagerNet"><a href="#抓包-charles-SagerNet" class="headerlink" title="抓包 charles + SagerNet"></a>抓包 charles + SagerNet</h4><p><img src="/2022/03/31/JDDJ/1.png" alt="抓包"></p>
<h4 id="jadx-静态分析"><a href="#jadx-静态分析" class="headerlink" title="jadx 静态分析"></a>jadx 静态分析</h4><p>搜索 “djencrypt”  很幸运就一个结果</p>
<p><img src="/2022/03/31/JDDJ/2.png" alt="jadx搜索"></p>
<p>进去跟踪函数</p>
<p><img src="/2022/03/31/JDDJ/3.png" alt="jadx搜索"><br><img src="/2022/03/31/JDDJ/4.png" alt="jadx搜索"><br><img src="/2022/03/31/JDDJ/5.png" alt="jadx搜索"><br><img src="/2022/03/31/JDDJ/6.png" alt="jadx搜索"></p>
<p>可以看到djencrypt  猜想是 先aes加密在base64 加密下</p>
<h4 id="打开-逆向之友-https-gchq-github-io-CyberChef"><a href="#打开-逆向之友-https-gchq-github-io-CyberChef" class="headerlink" title="打开 逆向之友 https://gchq.github.io/CyberChef/"></a>打开 逆向之友 <a href="https://gchq.github.io/CyberChef/" target="_blank" rel="noopener">https://gchq.github.io/CyberChef/</a></h4><p>CyberChef 解密</p>
<p><img src="/2022/03/31/JDDJ/img.png" alt="7.png"></p>
<h4 id="frida-hook"><a href="#frida-hook" class="headerlink" title="frida hook"></a>frida hook</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_djencrypt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		Java.use(<span class="string">"com.jd.jdsdk.security.AesCbcCrypto"</span>).encrypt.overload(<span class="string">'java.lang.String'</span>, <span class="string">'java.lang.String'</span>, <span class="string">'[B'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">str1,str2,b1</span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"str1=&gt;"</span>,str1,<span class="string">"&lt;=="</span>);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"str2=&gt;"</span>, str2);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"b1=&gt;"</span>, b1)</span><br><span class="line">			<span class="keyword">var</span> result = <span class="keyword">this</span>.encrypt(str1, str2, b1);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"result=&gt;"</span>, result);</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>hook结果和前面的CyberChef类似，所以我们前面的猜想是正确的</p>
<p><img src="/2022/03/31/JDDJ/7.png" alt="frida hook.png"></p>
<p>但是我们发现传入的参数还有个signKeyV1，继续分析</p>
<p>利用jadx 搜索可知 signKeyV1 是由k2 函数加密的，k2 是native函数，应该在jdpdj相关的so中</p>
<p><img src="/2022/03/31/JDDJ/8.png" alt="jadx"><br><img src="/2022/03/31/JDDJ/9.png" alt="jadx"></p>
<h4 id="ida-分析-libjdpdj-so"><a href="#ida-分析-libjdpdj-so" class="headerlink" title="ida 分析 libjdpdj.so"></a>ida 分析 libjdpdj.so</h4><p>搜索jin,定位到k2</p>
<p><img src="/2022/03/31/JDDJ/10.png" alt="ida"><br><img src="/2022/03/31/JDDJ/11.png" alt="ida"></p>
<p>进入g_k2 搜索发现 hmac_sha256</p>
<p><img src="/2022/03/31/JDDJ/12.png" alt="ida"><br><img src="/2022/03/31/JDDJ/13.png" alt="ida"><br>这里的符号都没去掉，init update final 函数都能看到，这里应该是标准的算法</p>
<h4 id="frida-hook-native"><a href="#frida-hook-native" class="headerlink" title="frida hook native"></a>frida hook native</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>MAC_Init_ex so 函数的参数二，长度 32 猜测是 hamc key<br><img src="/2022/03/31/JDDJ/14.png" alt="ida"></p>
<p>AES python<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AESCrypt</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    AES/CBC/PKCS5Padding 加密</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, iv)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用密钥,加密模式进行初始化</span></span><br><span class="line"><span class="string">        :param key:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(key) != <span class="number">16</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'密钥长度非16位!!!'</span>)</span><br><span class="line"></span><br><span class="line">        self.key = str.encode(key)</span><br><span class="line">        self.iv = str.encode(iv)</span><br><span class="line">        self.MODE = AES.MODE_CBC</span><br><span class="line">        self.block_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 填充函数</span></span><br><span class="line">        <span class="comment"># self.padding = lambda data: data + (self.block_size - len(data) % self.block_size) * chr(self.block_size - len(data) % self.block_size)</span></span><br><span class="line">        <span class="comment"># 此处为一坑,需要现将data转换为byte再来做填充，否则中文特殊字符等会报错</span></span><br><span class="line">        self.padding = <span class="keyword">lambda</span> data: data + (self.block_size - len(data.encode(<span class="string">'utf-8'</span>)) % self.block_size) * chr(</span><br><span class="line">            self.block_size - len(data.encode(<span class="string">'utf-8'</span>)) % self.block_size)</span><br><span class="line">        <span class="comment"># 截断函数</span></span><br><span class="line">        self.unpadding = <span class="keyword">lambda</span> data: data[:-ord(data[<span class="number">-1</span>])]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aes_encrypt</span><span class="params">(self, plaintext)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        加密</span></span><br><span class="line"><span class="string">        :param plaintext: 明文</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 填充16位</span></span><br><span class="line">            padding_text = self.padding(plaintext).encode(<span class="string">"utf-8"</span>)</span><br><span class="line">            <span class="comment"># 初始化加密器</span></span><br><span class="line">            cryptor = AES.new(self.key, self.MODE, self.iv)</span><br><span class="line">            <span class="comment"># 进行AES加密</span></span><br><span class="line">            encrypt_aes = cryptor.encrypt(padding_text)</span><br><span class="line">            <span class="comment"># 进行BASE64转码</span></span><br><span class="line">            encrypt_text = (base64.b64encode(encrypt_aes)).decode()</span><br><span class="line">            <span class="keyword">return</span> encrypt_text</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.exception(e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aes_decrypt</span><span class="params">(self, ciphertext)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        解密</span></span><br><span class="line"><span class="string">        :param ciphertext: 密文</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 密文必须是16byte的整数倍</span></span><br><span class="line">            <span class="comment"># if len(ciphertext) % 16 != 0:</span></span><br><span class="line">            <span class="comment">#     raise binascii.Error('密文错误!')</span></span><br><span class="line">            cryptor = AES.new(self.key, self.MODE, self.iv)</span><br><span class="line">            <span class="comment"># 进行BASE64转码</span></span><br><span class="line">            plain_base64 = base64.b64decode(ciphertext)</span><br><span class="line">            <span class="comment"># 进行ASE解密</span></span><br><span class="line">            decrypt_text = cryptor.decrypt(plain_base64)</span><br><span class="line">            <span class="comment"># 截取</span></span><br><span class="line">            plain_text = self.unpadding(decrypt_text.decode(<span class="string">"utf-8"</span>))</span><br><span class="line">            <span class="keyword">return</span> plain_text</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(<span class="string">'解密失败,请检查密钥是否正确!'</span>)</span><br><span class="line">            logging.exception(e)</span><br><span class="line">        <span class="keyword">except</span> binascii.Error <span class="keyword">as</span> e:</span><br><span class="line">            logging.exception(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logging.exception(e)</span><br></pre></td></tr></table></figure></p>
<p>python hmac_sha256<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hmac_sha256_encrypt</span><span class="params">(self, key, data)</span>:</span></span><br><span class="line">    _key = key.encode(<span class="string">'utf8'</span>)</span><br><span class="line">    _data = data.encode(<span class="string">'utf8'</span>)</span><br><span class="line">    encrypt_data = hmac.new(_key, _data, digestmod=sha256).hexdigest()</span><br><span class="line">    <span class="comment"># print(encrypt_data)</span></span><br><span class="line">    <span class="keyword">return</span> encrypt_data</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>adb命令大全</title>
    <url>/2022/03/25/adb/</url>
    <content><![CDATA[<h3 id="adb命令大全"><a href="#adb命令大全" class="headerlink" title="adb命令大全"></a>adb命令大全</h3><h5 id="1、查询已连接设备-模拟器"><a href="#1、查询已连接设备-模拟器" class="headerlink" title="1、查询已连接设备/模拟器"></a>1、查询已连接设备/模拟器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<h5 id="2、指定设备获取屏幕分辨率"><a href="#2、指定设备获取屏幕分辨率" class="headerlink" title="2、指定设备获取屏幕分辨率"></a>2、指定设备获取屏幕分辨率</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb -s 设备号 shell wm size</span><br></pre></td></tr></table></figure>
<h5 id="3、给指定设备安装应用"><a href="#3、给指定设备安装应用" class="headerlink" title="3、给指定设备安装应用"></a>3、给指定设备安装应用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb -s 设备号 install test.apk</span><br></pre></td></tr></table></figure>
<h5 id="4、启动-adb-server-命令"><a href="#4、启动-adb-server-命令" class="headerlink" title="4、启动 adb server 命令"></a>4、启动 adb server 命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb start-server</span><br></pre></td></tr></table></figure>
<h5 id="5、停止-adb-server-命令"><a href="#5、停止-adb-server-命令" class="headerlink" title="5、停止 adb server 命令"></a>5、停止 adb server 命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>
<h5 id="6、查看adb版本"><a href="#6、查看adb版本" class="headerlink" title="6、查看adb版本"></a>6、查看adb版本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb version</span><br></pre></td></tr></table></figure>
<h5 id="7、指定-adb-server-的网络端口"><a href="#7、指定-adb-server-的网络端口" class="headerlink" title="7、指定 adb server 的网络端口"></a>7、指定 adb server 的网络端口</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb -P &lt;port&gt; start-server</span><br></pre></td></tr></table></figure>
<h5 id="8、通过-IP-地址连接设备"><a href="#8、通过-IP-地址连接设备" class="headerlink" title="8、通过 IP 地址连接设备"></a>8、通过 IP 地址连接设备</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect &lt;device-ip-address&gt;</span><br></pre></td></tr></table></figure>
<h5 id="9、断开无线连接"><a href="#9、断开无线连接" class="headerlink" title="9、断开无线连接"></a>9、断开无线连接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb disconnect &lt;device-ip-address&gt;</span><br></pre></td></tr></table></figure>
<h5 id="10、查看所有应用"><a href="#10、查看所有应用" class="headerlink" title="10、查看所有应用"></a>10、查看所有应用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages</span><br></pre></td></tr></table></figure>
<h5 id="11、查看系统应用"><a href="#11、查看系统应用" class="headerlink" title="11、查看系统应用"></a>11、查看系统应用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages -s</span><br></pre></td></tr></table></figure>
<h5 id="12、查看第三方应用"><a href="#12、查看第三方应用" class="headerlink" title="12、查看第三方应用"></a>12、查看第三方应用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages -3</span><br></pre></td></tr></table></figure>
<h5 id="13、卸载应用（-表示应用的包名，-k-参数可选，表示卸载应用但保留数据和缓存目录。）"><a href="#13、卸载应用（-表示应用的包名，-k-参数可选，表示卸载应用但保留数据和缓存目录。）" class="headerlink" title="13、卸载应用（ 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。）"></a>13、卸载应用（<packagename> 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。）</packagename></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb uninstall [-k] &lt;packagename&gt;</span><br></pre></td></tr></table></figure>
<h5 id="14、清除应用数据与缓存"><a href="#14、清除应用数据与缓存" class="headerlink" title="14、清除应用数据与缓存"></a>14、清除应用数据与缓存</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell pm clear &lt;packagename&gt;</span><br></pre></td></tr></table></figure>
<h5 id="15、复制设备里的文件到电脑"><a href="#15、复制设备里的文件到电脑" class="headerlink" title="15、复制设备里的文件到电脑"></a>15、复制设备里的文件到电脑</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</span><br></pre></td></tr></table></figure>
<h5 id="16、复制电脑里的文件到设备"><a href="#16、复制电脑里的文件到设备" class="headerlink" title="16、复制电脑里的文件到设备"></a>16、复制电脑里的文件到设备</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</span><br></pre></td></tr></table></figure>
<h5 id="17、电源键"><a href="#17、电源键" class="headerlink" title="17、电源键"></a>17、电源键</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 26</span><br></pre></td></tr></table></figure>
<h5 id="18、菜单键"><a href="#18、菜单键" class="headerlink" title="18、菜单键"></a>18、菜单键</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 82</span><br></pre></td></tr></table></figure>
<h5 id="19、HOME-键"><a href="#19、HOME-键" class="headerlink" title="19、HOME 键"></a>19、HOME 键</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 3</span><br></pre></td></tr></table></figure>
<h5 id="20、返回键"><a href="#20、返回键" class="headerlink" title="20、返回键"></a>20、返回键</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 4</span><br></pre></td></tr></table></figure>
<h5 id="21、增加音量"><a href="#21、增加音量" class="headerlink" title="21、增加音量"></a>21、增加音量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 24</span><br></pre></td></tr></table></figure>
<h5 id="22、降低音量"><a href="#22、降低音量" class="headerlink" title="22、降低音量"></a>22、降低音量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 25</span><br></pre></td></tr></table></figure>
<h5 id="23、静音"><a href="#23、静音" class="headerlink" title="23、静音"></a>23、静音</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 164</span><br></pre></td></tr></table></figure>
<h5 id="24、播放-暂停"><a href="#24、播放-暂停" class="headerlink" title="24、播放/暂停"></a>24、播放/暂停</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 85</span><br></pre></td></tr></table></figure>
<h5 id="25、停止播放"><a href="#25、停止播放" class="headerlink" title="25、停止播放"></a>25、停止播放</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 86</span><br></pre></td></tr></table></figure>
<h5 id="26、播放下一首"><a href="#26、播放下一首" class="headerlink" title="26、播放下一首"></a>26、播放下一首</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 87</span><br></pre></td></tr></table></figure>
<h5 id="27、播放上一首"><a href="#27、播放上一首" class="headerlink" title="27、播放上一首"></a>27、播放上一首</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 88</span><br></pre></td></tr></table></figure>
<h5 id="28、恢复播放"><a href="#28、恢复播放" class="headerlink" title="28、恢复播放"></a>28、恢复播放</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 126</span><br></pre></td></tr></table></figure>
<h5 id="29、暂停播放"><a href="#29、暂停播放" class="headerlink" title="29、暂停播放"></a>29、暂停播放</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input keyevent 127</span><br></pre></td></tr></table></figure>
<h5 id="30、滑动解锁（参数-300-1000-300-500-分别表示起始点x坐标-起始点y坐标-结束点x坐标-结束点y坐标。）"><a href="#30、滑动解锁（参数-300-1000-300-500-分别表示起始点x坐标-起始点y坐标-结束点x坐标-结束点y坐标。）" class="headerlink" title="30、滑动解锁（参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标。）"></a>30、滑动解锁（参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标。）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input swipe 300 1000 300 500</span><br></pre></td></tr></table></figure>
<h5 id="31、输入文本"><a href="#31、输入文本" class="headerlink" title="31、输入文本"></a>31、输入文本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell input text hello</span><br></pre></td></tr></table></figure>
<h5 id="32、清空日志"><a href="#32、清空日志" class="headerlink" title="32、清空日志"></a>32、清空日志</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb logcat -c</span><br></pre></td></tr></table></figure>
<h5 id="33、查看设备型号"><a href="#33、查看设备型号" class="headerlink" title="33、查看设备型号"></a>33、查看设备型号</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell getprop ro.product.model</span><br></pre></td></tr></table></figure>
<h5 id="34、电池状况"><a href="#34、电池状况" class="headerlink" title="34、电池状况"></a>34、电池状况</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys battery</span><br></pre></td></tr></table></figure>
<h5 id="35、屏幕分辨率"><a href="#35、屏幕分辨率" class="headerlink" title="35、屏幕分辨率"></a>35、屏幕分辨率</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell wm size</span><br></pre></td></tr></table></figure>
<h5 id="36、屏幕密度"><a href="#36、屏幕密度" class="headerlink" title="36、屏幕密度"></a>36、屏幕密度</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell wm density</span><br></pre></td></tr></table></figure>
<h5 id="37、显示屏参数"><a href="#37、显示屏参数" class="headerlink" title="37、显示屏参数"></a>37、显示屏参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys window displays</span><br></pre></td></tr></table></figure>
<h5 id="38、查看Android-系统版本"><a href="#38、查看Android-系统版本" class="headerlink" title="38、查看Android 系统版本"></a>38、查看Android 系统版本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure>
<h5 id="39、查看IP-地址"><a href="#39、查看IP-地址" class="headerlink" title="39、查看IP 地址"></a>39、查看IP 地址</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell ifconfig | grep Mask</span><br></pre></td></tr></table></figure>
<h5 id="40、Mac-地址"><a href="#40、Mac-地址" class="headerlink" title="40、Mac 地址"></a>40、Mac 地址</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;sys&#x2F;class&#x2F;net&#x2F;wlan0&#x2F;address</span><br></pre></td></tr></table></figure>
<h5 id="41、CPU-信息"><a href="#41、CPU-信息" class="headerlink" title="41、CPU 信息"></a>41、CPU 信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;proc&#x2F;cpuinfo</span><br></pre></td></tr></table></figure>
<h5 id="42、内存信息"><a href="#42、内存信息" class="headerlink" title="42、内存信息"></a>42、内存信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell cat &#x2F;proc&#x2F;meminfo</span><br></pre></td></tr></table></figure>
<h5 id="43、使用-Monkey-进行压力测试（表示向-指定的应用程序发送-500-个伪随机事件。）"><a href="#43、使用-Monkey-进行压力测试（表示向-指定的应用程序发送-500-个伪随机事件。）" class="headerlink" title="43、使用 Monkey 进行压力测试（表示向  指定的应用程序发送 500 个伪随机事件。）"></a>43、使用 Monkey 进行压力测试（表示向 <packagename> 指定的应用程序发送 500 个伪随机事件。）</packagename></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell monkey -p &lt;packagename&gt; -v 500</span><br></pre></td></tr></table></figure>
<h5 id="44、查看进程"><a href="#44、查看进程" class="headerlink" title="44、查看进程"></a>44、查看进程</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell ps</span><br></pre></td></tr></table></figure>
<h5 id="45、查看实时资源占用情况"><a href="#45、查看实时资源占用情况" class="headerlink" title="45、查看实时资源占用情况"></a>45、查看实时资源占用情况</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb shell top</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>Auto.js结合 Mimtproxy爬取抖音店铺数据</title>
    <url>/2022/03/20/Autojs/</url>
    <content><![CDATA[<h3 id="Auto-js结合-Mimtproxy爬取抖音店铺数据"><a href="#Auto-js结合-Mimtproxy爬取抖音店铺数据" class="headerlink" title="Auto.js结合 Mimtproxy爬取抖音店铺数据"></a>Auto.js结合 Mimtproxy爬取抖音店铺数据</h3><h4 id="软件的安装"><a href="#软件的安装" class="headerlink" title="软件的安装"></a>软件的安装</h4><h5 id="1-Auto-js"><a href="#1-Auto-js" class="headerlink" title="1.Auto.js"></a>1.Auto.js</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Auto.js是Android上支持Node.js的JavaScript自动化和编程软件。</span><br><span class="line">由于auto.js被大量用于黑产目前作者，不支持，不维护免费版。只有维护付费版Auto.js Pro。</span><br></pre></td></tr></table></figure>
<p>1.模拟器安装是AutoJs4.1.0.apk免费版<br>auto.js 安装时开启无障碍服务<br><img src="/2022/03/20/Autojs/img.png" alt="img.png"><br>可以设置 按音量向上建停止代码，防止写无限循环推不出来<br>2.电脑端安装vscode<br>安装auto.js插件，输入如hyb1996，将两个插件进行安装<br><img src="/2022/03/20/Autojs/img_3.png" alt="安装插件"></p>
<h5 id="2-mitmproxy-安装"><a href="#2-mitmproxy-安装" class="headerlink" title="2.mitmproxy 安装"></a>2.mitmproxy 安装</h5><p>mitmproxy电脑环境安装 参考崔庆才的博客,<a href="https://cuiqingcai.com/5391.html" target="_blank" rel="noopener">mitmproxy安装</a><br>逍遥模拟器手机安装证书 </p>
<ol>
<li>电脑运行 mitmdump -p 8999  (端口号随意，不要冲突即可)</li>
<li>查看电脑ip Windows(ipconfig),Liunx(ifconfig)</li>
<li>电脑手机在同一局域网内，手机Wifi设置代理 <img src="/2022/03/20/Autojs/img_1.png" alt="设置代理"></li>
<li>在浏览器输入mitm.it，下载证书<img src="/2022/03/20/Autojs/img_2.png" alt="下载证书"></li>
<li>安装证书</li>
<li>当安装证书还是不行，抓不到数据需要把证书安装到跟目录下<br> 模拟器安装wifiadb(一个adb可以连接的软件)<br> <img src="/2022/03/20/Autojs/img_0.jpg" alt="参考"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect 192.168.31.216</span><br><span class="line">adb shell</span><br><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added</span><br><span class="line">mount -o rw,remount &#x2F;system (安卓7，模拟器是安卓7，安卓8不一样mount -o remount,rw &#x2F;)</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h4><h5 id="1-VScode-编写"><a href="#1-VScode-编写" class="headerlink" title="1. VScode 编写"></a>1. VScode 编写</h5><p>语法可参考 <a href="https://pro.autojs.org/docs/#/zh-cn/?id=%e7%bb%bc%e8%bf%b0" target="_blank" rel="noopener">官网网址</a><br>视频教学可以参考<a href="https://www.bilibili.com/video/BV1pQ4y1R7Us?p=1" target="_blank" rel="noopener">Auto.js从入门到精通</a></p>
<p>自动化代码 demo.js (不同手机，代码可能不适用)<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_shop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;className(<span class="string">"androidx.recyclerview.widget.RecyclerView"</span>).scrollable(<span class="literal">true</span>).depth(<span class="number">15</span>).findOne().children().forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> target = child.findOne(className(<span class="string">"android.widget.FrameLayout"</span>).depth(<span class="number">22</span>));</span><br><span class="line">        click(target.bounds().centerX(),target.bounds().centerY())</span><br><span class="line">        sleep(<span class="number">3000</span>) </span><br><span class="line">        click_text(<span class="string">'进店'</span>);</span><br><span class="line">        sleep(<span class="number">3000</span>)</span><br><span class="line">        click_text(<span class="string">'商品'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"出现错误"</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click_text</span>(<span class="params">str1</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 找到文字点击</span></span><br><span class="line">    text(str1).findOne()  </span><br><span class="line">    <span class="built_in">console</span>.log(str1)</span><br><span class="line">    click(str1)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">swipe_down</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 向下滑</span></span><br><span class="line">    <span class="keyword">var</span> i =<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">        <span class="keyword">var</span> finish = id(<span class="string">"ih6"</span>).exists()</span><br><span class="line">        <span class="keyword">if</span> (finish) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swipe(device.width / <span class="number">2</span>, <span class="number">1000</span>, device.width / <span class="number">2</span>, <span class="number">50</span>, <span class="number">2000</span>);</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeApp</span>(<span class="params">packagename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sh = <span class="keyword">new</span> Shell(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//注册一个对象运用shell命令，true(真) 以root权限运行代码，默认为falae假</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"am force-stop"</span>+<span class="string">" "</span>+packagename)</span><br><span class="line">    sh.exec(<span class="string">"am force-stop"</span>+<span class="string">" "</span>+packagename);<span class="comment">//执行代码运行中属于异步运行</span></span><br><span class="line">    <span class="comment">//上面值com.android.browser是浏览器的包名。自行修改成想停止软件的包名</span></span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//给点延迟让前面的运行命令，一会软件就会关闭</span></span><br><span class="line">    sh.exit;</span><br><span class="line">    <span class="comment">//退出Shell命令，正在执行的命令会被强制退出。所以上面加延迟</span></span><br><span class="line">    <span class="comment">// console.log("抖音");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"start"</span>)</span><br><span class="line">closeApp(<span class="string">"com.ss.android.ugc.aweme"</span>) <span class="comment">//关闭抖音</span></span><br><span class="line">sleep(<span class="number">1500</span>)</span><br><span class="line">home();</span><br><span class="line">sleep(<span class="number">1500</span>);</span><br><span class="line"><span class="comment">// click('抖音');</span></span><br><span class="line">launchApp(<span class="string">"抖音"</span>); <span class="comment">// 打开抖音</span></span><br><span class="line">sleep(<span class="number">5000</span>);</span><br><span class="line">click(<span class="string">"以后再说"</span>); <span class="comment">// app提示升级</span></span><br><span class="line">click(<span class="string">"我知道了"</span>); <span class="comment">// 青少年模式</span></span><br><span class="line">click_text(<span class="string">'我'</span>);  <span class="comment">// 点击我</span></span><br><span class="line">sleep(<span class="number">1500</span>);</span><br><span class="line">click_text(<span class="string">'关注'</span>); <span class="comment">// 点击关注</span></span><br><span class="line">sleep(<span class="number">2000</span>)</span><br><span class="line">click_text(<span class="string">"babycare官方旗舰店"</span>) <span class="comment">// 点击babycare官方旗舰店</span></span><br><span class="line">sleep(<span class="number">2000</span>);</span><br><span class="line">click_text(<span class="string">"店铺商品"</span>)</span><br><span class="line">sleep(<span class="number">2000</span>);</span><br><span class="line">click_text(<span class="string">"商品"</span>)</span><br><span class="line">sleep(<span class="number">2000</span>);</span><br><span class="line">swipe_down() <span class="comment">// 下滑</span></span><br><span class="line">closeApp(<span class="string">"com.ss.android.ugc.aweme"</span>)</span><br><span class="line">toast(<span class="string">'hello world!'</span>)</span><br></pre></td></tr></table></figure></p>
<h5 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h5><p>mt.py 将带有aweme/v1/store/product/list链接的数据保存到redis<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">REDIS_HOST = <span class="string">"REDIS_HOST"</span></span><br><span class="line">REDIS_PORT = <span class="number">63791</span></span><br><span class="line">REDIS_ENCODING = <span class="string">'utf-8'</span></span><br><span class="line">red = Redis(host=REDIS_HOST, port=REDIS_PORT, password=<span class="string">"password"</span>, db=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span><span class="params">(flow)</span>:</span></span><br><span class="line">    response_data = flow.response</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'aweme/v1/store/product/list'</span> <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        json_data = json.loads(response_data.text)</span><br><span class="line">        print(json_data)</span><br><span class="line">        red.rpush(<span class="string">'dy:items'</span>, json.dumps(json_data))</span><br></pre></td></tr></table></figure></p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><ol>
<li>开启auto.js服务 vscode Ctrl+shift+p  点击 Auto.js:Start Server<br> 可能会出现问题:9317端口是未打开的<br> 防火墙-&gt;高级设置-&gt;入站规则-&gt;新建规则-&gt;规则类型：TCP协议，9317端口，然后下一步，下一步，名称自定义</li>
<li>开启mitmproxy  mitmdump -s mt.py -p 8999 </li>
<li>手机WIFI设置代理 (如果前面做了可以省略)</li>
<li>auto.js APP连接电脑<br><img src="/2022/03/20/Autojs/img_5.png" alt="连接电脑.png"><br>5.运行auto.js任务  vscode Ctrl+shift+p  点击 Auto.js:Start Run<br><img src="/2022/03/20/Autojs/img_7.png" alt="运行效果"></li>
</ol>
<h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>vscode Ctrl+shift+p  点击 Auto.js:Save On Device 代码就安装到auto.js App中<br>在App 中demo.js设置定时任务 如图<img src="/2022/03/20/Autojs/img_9.png" alt="img_9.png"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>xposed 的基本使用</title>
    <url>/2022/03/30/Xposed/</url>
    <content><![CDATA[<h4 id="官网Api"><a href="#官网Api" class="headerlink" title="官网Api"></a><a href="https://api.xposed.info/reference/packages.html" target="_blank" rel="noopener">官网Api</a></h4><h4 id="新手入门文章"><a href="#新手入门文章" class="headerlink" title="新手入门文章"></a><a href="https://www.freebuf.com/articles/terminal/189021.html" target="_blank" rel="noopener">新手入门文章</a></h4><h4 id="xposed-创建"><a href="#xposed-创建" class="headerlink" title="xposed 创建"></a>xposed 创建</h4><ol>
<li><p>在/app/src/main/AndroidManifest.xml 添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">    android:name&#x3D;&quot;xposedmodule&quot;</span><br><span class="line">    android:value&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name&#x3D;&quot;xposeddescription&quot;</span><br><span class="line">    android:value&#x3D;&quot;这是一个Xposed例程&quot; &#x2F;&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name&#x3D;&quot;xposedminversion&quot;</span><br><span class="line">    android:value&#x3D;&quot;53&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>/app/src、build.gradle 添加</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compileOnly &#39;de.robv.android.xposed:api:82&#39;</span><br><span class="line">    compileOnly &#39;de.robv.android.xposed:api:82:sources&#39;</span><br><span class="line"></span><br><span class="line">    implementation &#39;androidx.appcompat:appcompat:1.1.0&#39;</span><br><span class="line">    implementation &#39;com.google.android.material:material:1.1.0&#39;</span><br><span class="line">    implementation &#39;androidx.constraintlayout:constraintlayout:1.1.3&#39;</span><br><span class="line">    testImplementation &#39;junit:junit:4.+&#39;</span><br><span class="line">    androidTestImplementation &#39;androidx.test.ext:junit:1.1.1&#39;</span><br><span class="line">    androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.2.0&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写hook代码 HookTest.java</p>
</li>
<li><p>右键点击 “main ” 文件夹 ， 选择new —&gt; Folder —&gt;Assets Folder，新建assets 文件夹 在建xposed_init文件，里面填写hook脚本文件路径<br>  <img src="/2022/03/30/Xposed/img.png" alt="img.png"></p>
</li>
</ol>
<h4 id="hook-构造函数"><a href="#hook-构造函数" class="headerlink" title="hook 构造函数"></a>hook 构造函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.jrb.xposeddemo;</span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">import de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line">import de.robv.android.xposed.XC_MethodHook;</span><br><span class="line">import de.robv.android.xposed.XposedBridge;</span><br><span class="line">import de.robv.android.xposed.XposedHelpers;</span><br><span class="line">import de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line">public class hook1 implements IXposedHookLoadPackage&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">        if (lpparam.packageName.equals(&quot;com.jrb.mytest&quot;))&#123;  &#x2F;&#x2F;过滤包名</span><br><span class="line">            Class myclass &#x3D; lpparam.classLoader.loadClass(&quot;com.jrb.mytest.teacher&quot;);  &#x2F;&#x2F; 找到class</span><br><span class="line"></span><br><span class="line">            XposedHelpers.findAndHookConstructor(myclass, new XC_MethodHook() &#123;  &#x2F;&#x2F; 编写hook </span><br><span class="line">                @Override</span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    super.beforeHookedMethod(param);</span><br><span class="line">                    Log.e(&quot;jrb1&quot;, &quot;teacher is called&quot;);</span><br><span class="line">                    XposedBridge.log(&quot;teacher is called&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    super.afterHookedMethod(param);</span><br><span class="line">                    Log.e(&quot;jrb1&quot;, &quot;teacher is over&quot;);</span><br><span class="line">                    XposedBridge.log(&quot;teacher is overed&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; 有参数的写法</span><br><span class="line">            XposedHelpers.findAndHookConstructor(myclass,int.class,String.class,boolean.class,new XC_MethodHook() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    super.beforeHookedMethod(param);</span><br><span class="line">                    Object[] a &#x3D; param.args;  &#x2F;&#x2F; 获取构造参数</span><br><span class="line">                    a[0] &#x3D; 17;   &#x2F;&#x2F; 修改hook参数</span><br><span class="line">                    a[1] &#x3D; &quot;yuji&quot;;</span><br><span class="line">                    a[2] &#x3D; true;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                @Override</span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    super.afterHookedMethod(param);</span><br><span class="line">                    Log.e(&quot;jrb1&quot;, &quot;teacher(17,&#39;yuji&#39;,true) is over&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改成员变量"><a href="#修改成员变量" class="headerlink" title="修改成员变量"></a>修改成员变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class myclass &#x3D; lpparam.classLoader.loadClass(&quot;com.jrb.mytest.teacher&quot;);</span><br><span class="line"></span><br><span class="line">XposedHelpers.findAndHookConstructor(&quot;com.jrb.mytest.teacher&quot;,lpparam.classLoader,new XC_MethodHook() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        super.beforeHookedMethod(param);</span><br><span class="line">        Method getString &#x3D; myclass.getDeclaredMethod(&quot;getString&quot;);</span><br><span class="line">        String str &#x3D; (String) getString.invoke(param.thisObject, null);</span><br><span class="line">        Log.e(&quot;jrb1&quot;, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        super.afterHookedMethod(param);</span><br><span class="line">        Log.e(&quot;jrb1&quot;, &quot;int to hook2&quot;);</span><br><span class="line">        Field age &#x3D; myclass.getDeclaredField(&quot;age&quot;);</span><br><span class="line">        age.set(param.thisObject, &quot;111&quot;);</span><br><span class="line">        </span><br><span class="line">        XposedHelpers.setStaticObjectField(myclass,&quot;name&quot;, &quot;test&quot;);</span><br><span class="line">        XposedHelpers.setStaticBooleanField(myclass,&quot;hair&quot;, false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="hook-方法"><a href="#hook-方法" class="headerlink" title="hook 方法"></a>hook 方法</h4><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XposedHelpers.findAndHookMethod(&quot;com.jrb.mytest.teacher$student&quot;, lpparam.classLoader, &quot;getString&quot;, new XC_MethodHook() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        super.beforeHookedMethod(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        super.afterHookedMethod(param);</span><br><span class="line">        String old_str &#x3D; (String) param.getResult();  &#x2F;&#x2F; 获得放回结果</span><br><span class="line">        Log.e(&quot;jrb1&quot;, old_str);</span><br><span class="line">        String str &#x3D; &quot;\narg:&quot;+&quot;88&quot;+&quot;  name:&quot;+&quot;QIMI&quot;+&quot;  hair:&quot;+&quot;true&quot; +&quot;\ncity:&quot;+&quot;HANGZHOU&quot;;</span><br><span class="line">        param.setResult(str);  &#x2F;&#x2F; 修改放回结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</code></pre><h4 id="主动调用static方法"><a href="#主动调用static方法" class="headerlink" title="主动调用static方法"></a>主动调用static方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过放射获取方法</span><br><span class="line">Class myclass &#x3D; lpparam.classLoader.loadClass(&quot;com.jrb.mytest.teacher&quot;);</span><br><span class="line">Method publicstaticmothod &#x3D; myclass.getDeclaredMethod(&quot;publicstaticmothod&quot;);</span><br><span class="line">String result &#x3D; (String) publicstaticmothod.invoke(null);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 通过xposed api 调用</span><br><span class="line">String result2 &#x3D; (String) XposedHelpers.callStaticMethod(myclass,&quot;publicstaticmothod&quot;);</span><br></pre></td></tr></table></figure>
<h4 id="publicmothod-privatemothod-寻找实例，主动调用"><a href="#publicmothod-privatemothod-寻找实例，主动调用" class="headerlink" title="publicmothod,privatemothod 寻找实例，主动调用"></a>publicmothod,privatemothod 寻找实例，主动调用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Log.e(&quot;jrb11&quot;,&quot;into hook&quot;);</span><br><span class="line">Class myclass &#x3D; lpparam.classLoader.loadClass(&quot;com.jrb.mytest.teacher&quot;);</span><br><span class="line"></span><br><span class="line">Object Obj &#x3D; myclass.newInstance();  &#x2F;&#x2F; 1.反射获取方法实例</span><br><span class="line">Constructor cons &#x3D; myclass.getConstructor(int.class);  &#x2F;&#x2F; 可以构造有参数的方法实例</span><br><span class="line">Object Obj2 &#x3D; cons.newInstance(1);</span><br><span class="line">Method publicmothod &#x3D; myclass.getDeclaredMethod(&quot;publicmothod&quot;);</span><br><span class="line"></span><br><span class="line">Object obj3 &#x3D; XposedHelpers.newInstance(myclass,1); &#x2F;&#x2F; 2.xposed api 获取方法实例</span><br><span class="line"></span><br><span class="line">String result &#x3D; (String) publicmothod.invoke(Obj);  &#x2F;&#x2F;1. 反射 调用</span><br><span class="line">Log.e(&quot;jrb11&quot; , result);</span><br><span class="line"></span><br><span class="line">String result2 &#x3D; (String) XposedHelpers.callMethod(Obj2,&quot;publicmothod&quot;); &#x2F;&#x2F; 2.xposed api 调用</span><br><span class="line">Log.e(&quot;jrb12&quot; , result2);</span><br><span class="line"></span><br><span class="line">String result3 &#x3D; (String) XposedHelpers.callMethod(obj3,&quot;privatemothod&quot;);</span><br><span class="line">Log.e(&quot;jrb13&quot;, result3);</span><br><span class="line"></span><br><span class="line">XposedHelpers.findAndHookConstructor(&quot;com.jrb.mytest.teacher&quot;, lpparam.classLoader,int.class, new XC_MethodHook() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        super.beforeHookedMethod(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        super.afterHookedMethod(param);</span><br><span class="line"></span><br><span class="line">        Method publicm &#x3D; myclass.getDeclaredMethod(&quot;publicmothod&quot;);</span><br><span class="line">        Method privatem &#x3D; myclass.getDeclaredMethod(&quot;privatemothod&quot;);</span><br><span class="line">        String result4 &#x3D; (String) publicm.invoke(param.thisObject);  &#x2F;&#x2F;3. hook Constructor 获取方法实例</span><br><span class="line">        privatem.setAccessible(true);</span><br><span class="line">        String result5 &#x3D; (String) privatem.invoke(param.thisObject);</span><br><span class="line">        Log.e(&quot;jrb14&quot; , result4);</span><br><span class="line">        Log.e(&quot;jrb15&quot; , result5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">XposedHelpers.findAndHookMethod(myclass, &quot;getStr&quot;, myclass, new XC_MethodHook() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        super.beforeHookedMethod(param);</span><br><span class="line">        Method publicmd &#x3D; myclass.getDeclaredMethod(&quot;publicmothod&quot;);</span><br><span class="line">        String result6 &#x3D; (String) publicmd.invoke(param.args[0]);  &#x2F;&#x2F;4. hook mothod 参数</span><br><span class="line">        Log.e(&quot;jrb16&quot; , result6);</span><br><span class="line">        String result7 &#x3D; (String) XposedHelpers.callMethod(param.args[0],&quot;privatemothod&quot;);</span><br><span class="line"></span><br><span class="line">        Log.e(&quot;jrb17&quot; , result7);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">        super.afterHookedMethod(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>xposed</tag>
      </tags>
  </entry>
  <entry>
    <title>Android逆向之某物newSign</title>
    <url>/2022/03/21/dewu/</url>
    <content><![CDATA[<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app version: 4.69.5</span><br><span class="line">手机: Piexl3 XL  Android 10 </span><br><span class="line">抓包: charles + SagerNet</span><br><span class="line">用到的工具: jadx, frida, ida</span><br></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.利用 charles + SagerNet, 抓详商品详情页的包，很明显 newSign就是我们要分析的参数</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img.png" alt="抓包"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.打开心爱的jadx 搜索 &quot;newSign&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img_1.png" alt="jadx搜索"><br><img src="/2022/03/21/dewu/img_2.png" alt="jadx搜索"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 确定java成加密函数位置， 上我们的frida 看看效果</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_newSign</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> RequestUtilsCls = Java.use(<span class="string">'com.shizhuang.duapp.common.utils.RequestUtils'</span>);</span><br><span class="line"></span><br><span class="line">		RequestUtilsCls.a.overload(<span class="string">'java.util.Map'</span>, <span class="string">'long'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> rc = <span class="keyword">this</span>.a(a,b);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"a= "</span> + a.entrySet().toArray());</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"b= "</span> + b);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"a &gt;&gt;&gt; rc= "</span> + rc);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> rc ;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		RequestUtilsCls.b.overload(<span class="string">'java.util.Map'</span>, <span class="string">'long'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> rc = <span class="keyword">this</span>.b(a,b);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"a= "</span> + a.entrySet().toArray());</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"b= "</span> + b);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"b &gt;&gt;&gt; rc= "</span> + rc);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> rc ;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		RequestUtilsCls.c.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> rc = <span class="keyword">this</span>.c(a,b);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"a= "</span> + a.entrySet().toArray());</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"b= "</span> + b);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"c &gt;&gt;&gt; rc= "</span> + rc);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> rc ;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img_4.png" alt="抓包"><br><img src="/2022/03/21/dewu/img_5.png" alt="frida"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. charles 抓包和 frida hook 的值是一样的</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img_3.png" alt="jadx搜索"><br><img src="/2022/03/21/dewu/img_6.png" alt="jadx搜索"><br><img src="/2022/03/21/dewu/img_7.png" alt="jadx搜索"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5.  通过jadx 分析可知  </span><br><span class="line">    有map传一些参数 在加上 uuid等参数结果 进行排序在</span><br><span class="line">    在调用native encodeByte方法加密后的结果</span><br><span class="line">    在进行MD5加密</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6. 通过ida 分析JNIEncrypt.so  是不同aes  利用frida hook so</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img_8.png" alt="img_8.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookencodeByte</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> encrypt_addr = Module.findExportByName(<span class="string">'libJNIEncrypt.so'</span>,<span class="string">'AES_128_ECB_PKCS5Padding_Encrypt'</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'encrypt_addr'</span>,encrypt_addr);</span><br><span class="line">	<span class="keyword">if</span>(encrypt_addr)&#123;</span><br><span class="line">	  Interceptor.attach(encrypt_addr,&#123;</span><br><span class="line">		onEnter:<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">		  <span class="built_in">console</span>.log(<span class="string">"arg0"</span>,args[<span class="number">0</span>].readCString());</span><br><span class="line">		  <span class="built_in">console</span>.log(<span class="string">"arg1"</span>,args[<span class="number">1</span>].readCString());</span><br><span class="line">		   </span><br><span class="line">		  <span class="comment">// var byteArray = args[0].readByteArray(200);</span></span><br><span class="line">		&#125;,</span><br><span class="line">		onLeave:<span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">		  <span class="built_in">console</span>.log(<span class="string">"result"</span>,retval.readCString());</span><br><span class="line">		&#125;</span><br><span class="line">	  &#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hook 的结果</span><br><span class="line"></span><br><span class="line">arg0 challengecf4224d39199d7017732c4aa5c0fa589loginTokenplatformandroidresult0serverStatus1timestamp1646594165319uuidb4f11c0b0518dd0ev4.69.5</span><br><span class="line">arg1 d245a0ba8d678a61</span><br><span class="line">result A5855EjJgrjeqGjxyCv7pRaG6k3hkxZxDuivETnxkXFd6XXU01lZIAn4PHmhL0sVXi04qk3dcDCGELQKDYtgZs&#x2F;shP7O8MxJkrDGX5Z7IVP6oeRRKF0GbSL9aaJnLpyUKdxTLvfU4Z6bXv7btRBrQZzP9Aw2U8j&#x2F;aY8u+dxdWXGnmOcWBZJM5nr3QZSBtpG6</span><br></pre></td></tr></table></figure>
<p>打开加密网址<a href="https://gchq.github.io/CyberChef/" target="_blank" rel="noopener">CyberChef</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发现 so 加密就是普通的aes ecs PKCS5Padding 加密</span><br></pre></td></tr></table></figure><br><img src="/2022/03/21/dewu/img_9.png" alt="img_9.png"></p>
<p>python版 aes<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncryptDate</span>:</span></span><br><span class="line">    <span class="comment"># AEC CBC BASE64</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.key = key  <span class="comment"># 初始化密钥</span></span><br><span class="line">        self.length = AES.block_size  <span class="comment"># 初始化数据块大小</span></span><br><span class="line">        self.aes = AES.new(self.key, AES.MODE_ECB)  <span class="comment"># 初始化AES,ECB模式的实例</span></span><br><span class="line">        <span class="comment"># 截断函数，去除填充的字符</span></span><br><span class="line">        self.unpad = <span class="keyword">lambda</span> date: date[<span class="number">0</span>:-ord(date[<span class="number">-1</span>])]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        #填充函数，使被加密数据的字节码长度是block_size的整数倍</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        count = len(text.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        add = self.length - (count % self.length)</span><br><span class="line">        entext = text + (chr(add) * add)</span><br><span class="line">        <span class="keyword">return</span> entext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, encrData)</span>:</span>  <span class="comment"># 加密函数</span></span><br><span class="line">        res = self.aes.encrypt(self.pad(encrData).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        msg = (base64.b64encode(res)).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, decrData)</span>:</span>  <span class="comment"># 解密函数</span></span><br><span class="line">        res = base64.decodebytes(decrData.encode(<span class="string">"utf8"</span>))</span><br><span class="line">        msg = self.aes.decrypt(res).decode(<span class="string">"utf8"</span>)</span><br><span class="line">        <span class="keyword">return</span> self.unpad(msg)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不过得物难点是在 极验点选 和 数美风控上</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>frida 环境</title>
    <url>/2022/03/26/frida_env/</url>
    <content><![CDATA[<h3 id="frida-kali环境配置"><a href="#frida-kali环境配置" class="headerlink" title="frida,kali环境配置"></a>frida,kali环境配置</h3><p>kali-linux-2021-1的地址<a href="https://pan.baidu.com/s/1dPIe5FzZLQzSLMsMcGZUrg" target="_blank" rel="noopener">百度云盘</a>  提取码：50jw </p>
<h4 id="1-切换root登录"><a href="#1-切换root登录" class="headerlink" title="1.切换root登录"></a>1.切换root登录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一次登录利用 kali  kali</span><br><span class="line">在Terminal输入 </span><br><span class="line">    sudo passwd root</span><br><span class="line">    password for kali: kali</span><br><span class="line">    New password: toor</span><br><span class="line">    Retype new password: toor</span><br><span class="line">出现passwd: password updated successfully表示成功</span><br><span class="line">重启虚拟机就可以 root toor 登录</span><br><span class="line"></span><br><span class="line">退回bash</span><br><span class="line">chsh -s &#x2F;bin&#x2F;bash</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h4 id="2-kali的一些修复操作"><a href="#2-kali的一些修复操作" class="headerlink" title="2.kali的一些修复操作"></a>2.kali的一些修复操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.修复时区</span><br><span class="line">dpkg-reconfigure tzdata</span><br><span class="line">然后选择 Asia→Shanghai</span><br><span class="line"></span><br><span class="line">2.安装一些常用工具</span><br><span class="line">apt update</span><br><span class="line">apt install tmux htop tree jnettop neofetch</span><br><span class="line"></span><br><span class="line">3.更变日志大小</span><br><span class="line">nano .bashrc</span><br><span class="line">HISTSIZE&#x3D;1000000</span><br><span class="line">HISTFILESIZE&#x3D;2000000</span><br><span class="line">source .bashrc</span><br></pre></td></tr></table></figure>
<h4 id="3-proxychains4代理设置"><a href="#3-proxychains4代理设置" class="headerlink" title="3.proxychains4代理设置"></a>3.proxychains4代理设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano &#x2F;etc&#x2F;proxychains4.conf </span><br><span class="line">注释 proxy_dns</span><br><span class="line">注释 scok4 127.0.0.1 9050</span><br><span class="line">添加 scok5 192.168.1.100 1080</span><br><span class="line">proxychains curl ip.sb</span><br></pre></td></tr></table></figure>
<h4 id="4-redsocks全局代理设置参考文章"><a href="#4-redsocks全局代理设置参考文章" class="headerlink" title="4.redsocks全局代理设置参考文章"></a>4.redsocks全局代理设置<a href="https://cnblogs.com/volqiu/p/4811402.html" target="_blank" rel="noopener">参考文章</a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano redsocks.conf</span><br><span class="line">设置ip和电脑ip相同   ip &#x3D; 192.168.1.135;</span><br><span class="line">启动 redsocks</span><br><span class="line">查看进程  ps aux |grep redsocks</span><br><span class="line">查看监听端口 ss -lntp|more</span><br><span class="line">最后运行代码  sh iptables.sh</span><br></pre></td></tr></table></figure>
<p>iptables.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#不重定向目的地址为服务器的包</span><br><span class="line">iptables -t nat -A OUTPUT -d 192.168.179.1 -j RETURN  #请用你的shadowsocks服务器的地址替换$SERVER_IP</span><br><span class="line"> </span><br><span class="line">#不重定向私有地址的流量</span><br><span class="line">iptables -t nat -A OUTPUT -d 10.0.0.0&#x2F;8 -j RETURN</span><br><span class="line">iptables -t nat -A OUTPUT -d 172.16.0.0&#x2F;16 -j RETURN</span><br><span class="line">iptables -t nat -A OUTPUT -d 192.168.0.0&#x2F;16 -j RETURN</span><br><span class="line"> </span><br><span class="line">#不重定向保留地址的流量,这一步很重要</span><br><span class="line">iptables -t nat -A OUTPUT -d 127.0.0.0&#x2F;8 -j RETURN</span><br><span class="line"> </span><br><span class="line">#重定向所有不满足以上条件的流量到redsocks监听的12345端口</span><br><span class="line">iptables -t nat -A OUTPUT -p tcp -j REDIRECT --to-ports 12345 #12345是你的redsocks运行的端口,请根据你的情况替换它</span><br></pre></td></tr></table></figure>
<h4 id="去缓存"><a href="#去缓存" class="headerlink" title="去缓存"></a>去缓存</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;root&#x2F;.cache&#x2F;vmware</span><br><span class="line">rm -rf *</span><br></pre></td></tr></table></figure>
<h4 id="5-一些工具的安装"><a href="#5-一些工具的安装" class="headerlink" title="5.一些工具的安装"></a>5.一些工具的安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.安装AS</span><br><span class="line">wget https:&#x2F;&#x2F;redirector.gvt1.com&#x2F;edgedl&#x2F;android&#x2F;studio&#x2F;ide-zips&#x2F;4.1.2.0&#x2F;android-studio-ide-201.7042882-linux.tar.gz</span><br><span class="line">tar zxvf android-studio-ide-201.7042882-linux.tar.gz</span><br><span class="line"></span><br><span class="line">设置adb 系统变量</span><br><span class="line">nano ~&#x2F;.bashrc</span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;platform-tools</span><br><span class="line">source ~&#x2F;.bashrc</span><br><span class="line"></span><br><span class="line">2.安装jdax</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;skylot&#x2F;jadx&#x2F;releases&#x2F;download&#x2F;v1.2.0&#x2F;jadx-1.2.0.zip</span><br><span class="line">mkdir jadx</span><br><span class="line">mv jadx-1.2.0.zip jadx</span><br><span class="line">cd jadx</span><br><span class="line">7z x jadx-1.2.0.zip </span><br><span class="line"></span><br><span class="line">3.安装010</span><br><span class="line">https:&#x2F;&#x2F;www.sweetscape.com&#x2F;download&#x2F;010editor&#x2F;download_010editor_linux64.html</span><br><span class="line">tar zxvf 010EditorLinux64Installer11.0.1.tar.gz </span><br><span class="line">.&#x2F;010EditorLinux64Installer </span><br><span class="line"></span><br><span class="line">4.安装vs</span><br><span class="line">https:&#x2F;&#x2F;code.visualstudio.com&#x2F; 下载deb 版本</span><br><span class="line">dpkg -i code_1.53.2-1613044664_amd64.deb</span><br><span class="line"></span><br><span class="line">5.安装jeb</span><br><span class="line">7z x jeb-pro-3.19.1.202005071620_pwd_ilbtcdnwiuypbzeo_sn_#61641164873316763_.zip</span><br><span class="line">.&#x2F;jeb_linux.sh</span><br><span class="line">输入密码  ilbtcdnwiuypbzeo</span><br><span class="line">python jebKeygen.py （python2）</span><br><span class="line">JEB License Key: xxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">6.Kali Linux里的as4的DDMS启动失败，原因是要用as自带的jre来启动，直接.&#x2F;monitor用的是Kali系统的jdk，版本太高了：</span><br><span class="line"># ln -s  &#x2F;root&#x2F;Desktop&#x2F;android-studio&#x2F;jre&#x2F; &#x2F;root&#x2F;Android&#x2F;Sdk&#x2F;tools[表情]b&#x2F;monitor-x86_64&#x2F;</span><br></pre></td></tr></table></figure>
<h4 id="6-安装pyenv"><a href="#6-安装pyenv" class="headerlink" title="6.安装pyenv"></a>6.安装pyenv</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pyenv&#x2F;pyenv.git ~&#x2F;.pyenv</span><br><span class="line">echo &#39;export PYENV_ROOT&#x3D;&quot;$HOME&#x2F;.pyenv&quot;&#39; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">echo &#39;export PATH&#x3D;&quot;$PYENV_ROOT&#x2F;bin:$PATH&quot;&#39; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">echo -e &#39;if command -v pyenv 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#39; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line">exec &quot;$SHELL&quot;</span><br><span class="line">sudo apt-get update; sudo apt-get install --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</span><br><span class="line">source ~&#x2F;.bashrc</span><br><span class="line"></span><br><span class="line">安装python:  pyenv install 3.8.0</span><br><span class="line">切换python:  pyenv local 3.8.0</span><br><span class="line">查看系统所有python版本:  pyenv versions</span><br><span class="line">查看系统当前使用:   python pyenv version</span><br></pre></td></tr></table></figure>
<h4 id="7-安装frida环境"><a href="#7-安装frida环境" class="headerlink" title="7.安装frida环境"></a>7.安装<a href="https://github.com/frida/frida" target="_blank" rel="noopener">frida</a>环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装3.8.0特定版本</span><br><span class="line">pip install frida&#x3D;&#x3D;12.8.0</span><br><span class="line">pip install frida-tools&#x3D;&#x3D;5.3.0</span><br><span class="line">pip install objection&#x3D;&#x3D;1.8.4</span><br><span class="line"></span><br><span class="line">普通下载</span><br><span class="line">pip install frida-tool</span><br><span class="line">pip install objection</span><br><span class="line"></span><br><span class="line">安装node</span><br><span class="line">apt-get install -y nodejs</span><br><span class="line">apt-get install npm</span><br><span class="line"></span><br><span class="line">js环境 </span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;oleavr&#x2F;frida-agent-example.git</span><br><span class="line">cd frida-agent-example&#x2F;</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">手机frida-server安装</span><br><span class="line">adb push frida-server-12.8.0-android-arm64 &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">chmod 777 frida-server-12.8.0-android-arm64 </span><br><span class="line">.&#x2F;frida-server-12.8.0-android-arm64</span><br><span class="line"></span><br><span class="line">监听端口</span><br><span class="line">.&#x2F;frida-server-12.8.0-android-arm64 -l 0.0.0.0:8888</span><br><span class="line"></span><br><span class="line">js frida运行js脚本</span><br><span class="line">frida -U -f com.example.android --no-pause -l s1.js</span><br><span class="line"></span><br><span class="line">SPAWN：创建进程时就hook：有壳的话就不行</span><br><span class="line">frida -U -f com.example.demo s1.js --no-pause </span><br><span class="line">ATTACH：应用运行过程中hook：有壳也是ok</span><br><span class="line">frida -UF -l s1.js</span><br><span class="line"></span><br><span class="line">frida-ps -U 查看通过usb连接的android手机上的进程</span><br><span class="line">frida -H 192.168.1.8:8888 -f com.android.settings  查看通过端口连接的android手机上的进程</span><br><span class="line">在系统里装上这个这个npm包，可以在任意工程获得frida的代码提示、补全和API查看</span><br><span class="line">npm install --save @types&#x2F;frida-gum</span><br></pre></td></tr></table></figure>
<h3 id="Frida-rpc"><a href="#Frida-rpc" class="headerlink" title="Frida rpc"></a>Frida rpc</h3><h4 id="例子一：-send-recv"><a href="#例子一：-send-recv" class="headerlink" title="例子一： send recv"></a>例子一： send recv</h4><p>java 代码： 输入 username 和 password  然后进行base64编码输出<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (username_et.getText().toString().compareTo(<span class="string">"admin"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            message_tv.setText(<span class="string">"You cannot login as admin"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//hook target</span></span><br><span class="line">        message_tv.setText(<span class="string">"Sending to the server :"</span> + Base64.encodeToString((username_et.getText().toString() + <span class="string">":"</span> + password_et.getText().toString()).getBytes(), Base64.DEFAULT));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><img src="/2022/03/26/frida_env/7_1.png" alt="app"></p>
<p>js hook 代码 t1.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"android.widget.TextView"</span>).setText.overload(<span class="string">'java.lang.CharSequence'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> string_to_send_x = x.toString();</span><br><span class="line">            <span class="keyword">var</span> string_to_recv;</span><br><span class="line">            send(string_to_send_x); <span class="comment">// 将数据输出过去</span></span><br><span class="line">            recv(<span class="function"><span class="keyword">function</span>(<span class="params">received_json_objection</span>)</span>&#123;  <span class="comment">// 接收放回的数据</span></span><br><span class="line">                string_to_recv = received_json_objection.my_data;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"string_to_recv:"</span>+string_to_recv)</span><br><span class="line">            &#125;).wait();</span><br><span class="line">            <span class="keyword">var</span> javaStringToSend=Java.use(<span class="string">'java.lang.String'</span>).$<span class="keyword">new</span>(string_to_recv);  <span class="comment">// 转成java的字符串</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.setText(javaStringToSend);  <span class="comment">// 修改放回值</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"x.toString(),result"</span>,javaStringToSend.toString(),result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>python 代码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_message_handler</span><span class="params">(message,payload)</span>:</span></span><br><span class="line">    print(message)</span><br><span class="line">    print(payload)</span><br><span class="line">    <span class="comment"># 处理 send 函数传回的数据</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">"type"</span>]==<span class="string">"send"</span>:</span><br><span class="line">        print(message[<span class="string">"payload"</span>])</span><br><span class="line">        data = message[<span class="string">"payload"</span>].split(<span class="string">":"</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        print(<span class="string">'message:'</span>,message)</span><br><span class="line">        data = str(base64.b64decode(data))</span><br><span class="line">        print(<span class="string">'data:'</span>,data)</span><br><span class="line">        usr,pw = data.split(<span class="string">":"</span>)</span><br><span class="line">        print(<span class="string">'pw:'</span>,pw)</span><br><span class="line">        data = str(base64.b64encode((<span class="string">"admin"</span>+<span class="string">":"</span>+pw).encode()))</span><br><span class="line">        print(<span class="string">"encode data:"</span>,data)</span><br><span class="line">        script.post(&#123;<span class="string">"my_data"</span>:data&#125;)  <span class="comment"># 传回修改好的数据</span></span><br><span class="line">        print(<span class="string">"Modified data sent !"</span>)</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()  <span class="comment">#连接 adb</span></span><br><span class="line">session = device.attach(<span class="string">"com.example.lesson7sec"</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"t1.js"</span>) <span class="keyword">as</span> f :</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.on(<span class="string">"message"</span>,my_message_handler)</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure></p>
<h4 id="例子二：-rpc"><a href="#例子二：-rpc" class="headerlink" title="例子二： rpc"></a>例子二： rpc</h4><p>js hook t2.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">"com.example.lesson4one.MainActivity"</span>,&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"found instance :"</span>,instance);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"found instance :"</span>,instance.secret())</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">rpc.exports = &#123;</span><br><span class="line">    invokefunc:invoke</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>python 调用代码</p>
<h2 id><a href="#" class="headerlink" title></a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_message_handler</span><span class="params">(message,payload)</span>:</span></span><br><span class="line">    print(message)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#device = frida.get_usb_device()</span></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">"192.168.1.102:9999"</span>) <span class="comment"># 端口调用</span></span><br><span class="line"><span class="comment">#pid = device.spawn(["com.example.lesson4one"]) # span 加载</span></span><br><span class="line"><span class="comment">#session = device.attach(pid)</span></span><br><span class="line">session = device.attach(<span class="string">"com.example.lesson4one"</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"t2.js"</span>) <span class="keyword">as</span> f :</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.on(<span class="string">"message"</span>,my_message_handler)  <span class="comment"># 注册错误处理回调</span></span><br><span class="line">script.load()</span><br><span class="line"><span class="comment"># rpc 调用</span></span><br><span class="line">script.exports.invokefunc()</span><br></pre></td></tr></table></figure></h2><h3 id="远程调用-nps-端口转发"><a href="#远程调用-nps-端口转发" class="headerlink" title="远程调用 nps 端口转发"></a>远程调用 <a href="https://github.com/ehang-io/nps" target="_blank" rel="noopener">nps</a> 端口转发</h3><p>服务端和客户端 可参考 <a href="https://github.com/ehang-io/nps/blob/master/README_zh.md" target="_blank" rel="noopener">README 文档</a></p>
<p>pc 客户端 配置 </p>
<p><img src="/2022/03/26/frida_env/nps_1.png" alt="app"></p>
<p>服务端 执行客户端的 客户端命令：./npc -server={ip}:{port} -vkey={key} -type=tcp</p>
<p><img src="/2022/03/26/frida_env/nps_2.png" alt="app"></p>
<p>配置对应的tcp  记得linux 端口 要开放</p>
<p><img src="/2022/03/26/frida_env/nps_3.png" alt="app"></p>
<p>代码 修改 连接 linux 服务器的地址</p>
<p><img src="/2022/03/26/frida_env/nps_4.png" alt="app"></p>
<h3 id="frida-打印-构造数组-对象，Map-类和参数"><a href="#frida-打印-构造数组-对象，Map-类和参数" class="headerlink" title="frida 打印 构造数组,对象，Map,类和参数"></a>frida 打印 构造数组,对象，Map,类和参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.openClassFile(<span class="string">"/data/local/tmp/r0gson.dex"</span>).load();</span><br><span class="line">        <span class="keyword">const</span> gson = Java.use(<span class="string">'com.r0ysue.gson.Gson'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主动hook java.lang.Character  打印参数，返回值，修改返回值</span></span><br><span class="line">        Java.use(<span class="string">"java.lang.Character"</span>).toString.overload(<span class="string">'char'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.toString(x);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"x,result"</span>,x,result);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"对象数组"</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 重载, 构造Arrays, gson 打印Arrays, 修改返回值</span></span><br><span class="line">        Java.use(<span class="string">"java.util.Arrays"</span>).toString.overload(<span class="string">'[C'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">arg1</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> charArray = Java.array(<span class="string">'char'</span>, [ <span class="string">'一'</span>,<span class="string">'去'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'里'</span> ]);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.toString(charArray);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"arg1"</span>,gson.$<span class="keyword">new</span>().toJson(arg1));</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"x,result"</span>,gson.$<span class="keyword">new</span>().toJson(charArray),result);</span><br><span class="line">            <span class="keyword">return</span> Java.use(<span class="string">'java.lang.String'</span>).$<span class="keyword">new</span>(Java.array(<span class="string">'char'</span>,[<span class="string">'烟'</span>,<span class="string">'村'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'家'</span>]));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Java.use(<span class="string">"java.util.Arrays"</span>).toString.overload(<span class="string">'[B'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.toString(x);</span><br><span class="line">            <span class="comment">// console.log("x,result",gson.$new().toJson(x),result);            </span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"x,result"</span>,x,result);            </span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">// 在内存中在实例，调用实例的动态方法， 子类向父类转型</span></span><br><span class="line">        <span class="keyword">var</span> JuiceHandle = <span class="literal">null</span> ;</span><br><span class="line">        Java.choose(<span class="string">"com.r0ysue.a0526printout.Juice"</span>,&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"found instance :"</span>,instance);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"filling energy,"</span>,instance.fillEnergy());</span><br><span class="line">                JuiceHandle= instance;</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="string">"Search Completed!"</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> WaterHandle = Java.cast(JuiceHandle ,Java.use(<span class="string">"com.r0ysue.a0526printout.Water"</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Water invoke still "</span>, WaterHandle.still(WaterHandle));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造类,方法, 主动调用</span></span><br><span class="line">        <span class="keyword">var</span> beer = Java.registerClass(&#123;</span><br><span class="line">            name: <span class="string">'com.r0ysue.a0526printout.beer'</span>,</span><br><span class="line">            implements: [Java.use(<span class="string">'com.r0ysue.a0526printout.liquid'</span>)],</span><br><span class="line">            methods: &#123;</span><br><span class="line">                flow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"look I`m beer!"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"taste good!"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beer.flow:"</span>,beer.$<span class="keyword">new</span>().flow());  </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 枚举打印hashmap,  hook 打印hashmap</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashmap888</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">"java.util.HashMap"</span>,&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance.toString().indexOf(<span class="string">"ISBN"</span>)!=<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"found HashMap"</span>,instance);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"HashMap toString:"</span>,instance.toString());</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"Search Completed!"</span>)&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        Java.use(<span class="string">"java.util.HashMap"</span>).put.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.put(x,y);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"x,y,result"</span>,x,y,result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印obj</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jhexdump</span>(<span class="params">array,off,len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ptr = Memory.alloc(len-off);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = off; i &lt; len; ++i)</span><br><span class="line">        Memory.writeS8(ptr.add(i), array[i]);</span><br><span class="line">    <span class="built_in">console</span>.log(hexdump(ptr, &#123; <span class="attr">offset</span>: off, <span class="attr">length</span>: len, <span class="attr">header</span>: <span class="literal">false</span>, <span class="attr">ansi</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实例App-KGB"><a href="#实例App-KGB" class="headerlink" title="实例App KGB"></a>实例App KGB</h3><p>我们打开app 时会遇到拦截,通过提示在jadx 中搜索</p>
<p><img src="/2022/03/26/frida_env/kgb1.png" alt="kgb"></p>
<p>定位拦截代码</p>
<p><img src="/2022/03/26/frida_env/kgb2.png" alt="kgb"></p>
<p>res/values/strings.xml</p>
<p><img src="/2022/03/26/frida_env/kgb3.png" alt="kgb"></p>
<p>js hook<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Java.use(<span class="string">"java.lang.System"</span>).getProperty.overload(<span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.getProperty(x);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"x,result:"</span>,x,result);</span><br><span class="line">            <span class="keyword">return</span> Java.use(<span class="string">"java.lang.String"</span>).$<span class="keyword">new</span>(<span class="string">"Russia"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">Java.use(<span class="string">"java.lang.System"</span>).getenv.overload(<span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">this</span>.getenv(x);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"x,result:"</span>,x,result);</span><br><span class="line">    <span class="keyword">return</span> Java.use(<span class="string">"java.lang.String"</span>).$<span class="keyword">new</span>(<span class="string">"RkxBR3s1N0VSTDFOR180UkNIM1J9Cg=="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>登录 username:codenameduchess  84e343a0486ff05530df6c705c8bb4  passward:guest login代码</p>
<p><img src="/2022/03/26/frida_env/kgb4.png" alt="kgb"></p>
<p>Messenger 代码</p>
<p><img src="/2022/03/26/frida_env/kgb7.png" alt="kgb"></p>
<p>java a 函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">a</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = charArray[i];</span><br><span class="line">            charArray[i] = (<span class="keyword">char</span>) (charArray[(charArray.length - i) - <span class="number">1</span>] ^ <span class="string">'2'</span>);</span><br><span class="line">            charArray[(charArray.length - i) - <span class="number">1</span>] = (<span class="keyword">char</span>) (c ^ <span class="string">'A'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(charArray);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>创建android studio项目 新建类reverseA.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反解p输入的内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode_p</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String p = <span class="string">"V@]EAASB\u0012WZF\u0012e,a$7(&amp;am2(3.\u0003"</span>;</span><br><span class="line">    String result = a(p);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">a</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] charArray = str.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = charArray[i];</span><br><span class="line">        charArray[i] = (<span class="keyword">char</span>) (charArray[(charArray.length - i) - <span class="number">1</span>] ^ <span class="string">'A'</span>);</span><br><span class="line">        charArray[(charArray.length - i) - <span class="number">1</span>] = (<span class="keyword">char</span>) (c ^ <span class="string">'2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(charArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将不规则字符转成hex</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">r_to_hex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String r = <span class="string">"\u0000dslp&#125;oQ\u0000 dks$|M\u0000h +AYQg\u0000P*!M$gQ\u0000"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = r.getBytes();</span><br><span class="line">    String result = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bytes.length;i++)&#123;</span><br><span class="line">        result+=String.format(<span class="string">"%02x"</span>,bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译 拿出 classes.dex, 然后push到手机上,记得给权限 chmod 777 classes.dex</p>
<p>js hook<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Java.openClassFile(<span class="string">"/data/local/tmp/classes.dex"</span>).load();</span><br><span class="line"><span class="keyword">const</span> reverseA = Java.use(<span class="string">'com.jrb.kgb.reverseA'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"reverseA result:"</span>,reverseA.decode_p()); <span class="comment">// Boris, give me the password</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"r_to_hex result:"</span>,reverseA.r_to_hex()); <span class="comment">// 0064736c707d6f510020646b73247c4d0068202b4159516700502a214d24675100</span></span><br></pre></td></tr></table></figure><br><img src="/2022/03/26/frida_env/kgb6.png" alt="kgb"></p>
<p>z3 的使用,反解b函数 pip install z3-solver(代码有误)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">from binascii import b2a_hex,a2b_hex</span><br><span class="line"></span><br><span class="line">s &#x3D;Solver()</span><br><span class="line">r &#x3D; &quot;0064736c707d6f510020646b73247c4d0068202b4159516700502a214d24675100&quot;</span><br><span class="line"></span><br><span class="line">r_result &#x3D; bytearray(a2b_hex(r))</span><br><span class="line">print(r_result)</span><br><span class="line">for i in range(int(len(r_result)&#x2F;2)) :</span><br><span class="line">    c &#x3D; r_result[i]</span><br><span class="line">    r_result[i] &#x3D; r_result[len(r_result)-i-1]</span><br><span class="line">    r_result[len(r_result)-i-1] &#x3D; c</span><br><span class="line">print(b2a_hex(r_result))</span><br><span class="line"></span><br><span class="line">x &#x3D; [BitVec(&quot;x%s&quot; % i, 32) for i in range(len(r_result))]</span><br><span class="line">for i in range(len(r_result)):</span><br><span class="line">    c &#x3D; r_result[i]</span><br><span class="line">    print(i,hex(c))</span><br><span class="line">    s.add(((x[i] &gt;&gt; (i % 8)) ^ x[i] ) &#x3D;&#x3D; r_result[i])</span><br><span class="line">if (s.check() &#x3D;&#x3D; sat):</span><br><span class="line">    model &#x3D; s.model()</span><br><span class="line">    print(model)</span><br><span class="line">    flag&#x3D;&quot;&quot;</span><br><span class="line">    for i in range(len(r_result)):</span><br><span class="line">        if (model[x[i]] !&#x3D; None):</span><br><span class="line">            flag +&#x3D; chr(model[x[i]].as_long().real)</span><br><span class="line">        else:</span><br><span class="line">            flag +&#x3D; &quot; &quot;</span><br><span class="line">    print(&#39;&quot;&#39; + flag + &#39;&quot;&#39;)</span><br><span class="line">    print(len(flag), len(r_result))</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Android逆向之某狗signature</title>
    <url>/2022/03/29/kugou/</url>
    <content><![CDATA[<h3 id="Android逆向之某狗signature"><a href="#Android逆向之某狗signature" class="headerlink" title="Android逆向之某狗signature"></a>Android逆向之某狗signature</h3><h4 id="抓包-charles-vpn"><a href="#抓包-charles-vpn" class="headerlink" title="抓包 charles + vpn"></a>抓包 charles + vpn</h4><p>app version 11.1.4</p>
<p>今天我们分析一个简单的app的signature,首先先抓包</p>
<p><img src="/2022/03/29/kugou/1.png" alt="抓包"></p>
<p>利用反编译工具，搜索”signature”</p>
<p><img src="/2022/03/29/kugou/2.png" alt="jadx"></p>
<p>经过跟踪定位,我们猜测com.kugou.common.utils.ba是加密类</p>
<p><img src="/2022/03/29/kugou/3.png" alt="jadx"></p>
<p>接下来进行frida hook</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	Java.perform(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> signatureCls = Java.use(<span class="string">'com.kugou.common.utils.ba'</span>);</span><br><span class="line">		signatureCls.b.overload(<span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">str1</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> result = <span class="keyword">this</span>.b(str1);</span><br><span class="line">	        <span class="built_in">console</span>.log(<span class="string">"&gt;&gt;&gt; signature inStr  = "</span> + str1);</span><br><span class="line">		    <span class="built_in">console</span>.log(<span class="string">" &gt;&gt;&gt;  signature rc= "</span> + result);</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/29/kugou/4.png" alt="hook"></p>
<p>将抓包结果 利用postman发请求 Copy cURL Reuqest</p>
<p><img src="/2022/03/29/kugou/5.png" alt="hook"><br><img src="/2022/03/29/kugou/6.png" alt="hook"></p>
<p>不难发现 我signture 的加密函数就是 我们 请求参数排序 加 盐  md5加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">"http://m.comment.service.kugou.com/v1/cmtlist?"</span></span><br><span class="line">salt = <span class="string">'OIlwieks28dk2k092lksi2UIkp'</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'ver'</span>: <span class="string">'10'</span>,</span><br><span class="line">    <span class="string">'code'</span>: <span class="string">'fc4be23b4e972707f36b8a828a93ba8a'</span>,</span><br><span class="line">    <span class="string">'clienttoken'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'area_code'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'extdata'</span>: <span class="string">'88b790d52570772c3a8b830c0b9b9236'</span>,</span><br><span class="line">    <span class="string">'mid'</span>: <span class="string">'317888404353155346828797154789613205939'</span>,</span><br><span class="line">    <span class="string">'uuid'</span>: <span class="string">'136f14e8929164da7fd59d45a78b65fa'</span>,</span><br><span class="line">    <span class="string">'p'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'dfid'</span>: <span class="string">'0QbvHC39mPM23Ewcap3wo8d1'</span>,</span><br><span class="line">    <span class="string">'show_star_cmts'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'appid'</span>: <span class="string">'1005'</span>,</span><br><span class="line">    <span class="string">'is_show_hot_word'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'pagesize'</span>: <span class="string">'20'</span>,</span><br><span class="line">    <span class="string">'show_classify'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'clientver'</span>: <span class="string">'11145'</span>,</span><br><span class="line">    <span class="string">'tag'</span>: <span class="string">'5'</span>,</span><br><span class="line">    <span class="string">'clienttime'</span>: str(int(time.time())),</span><br><span class="line">    <span class="string">'gitversion'</span>: <span class="string">'bf61921'</span>,</span><br><span class="line">    <span class="string">'kugouid'</span>: <span class="string">'0'</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 按照 key 排序</span></span><br><span class="line">post_data = collections.OrderedDict(</span><br><span class="line">    sorted(params.items(),</span><br><span class="line">           key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">)</span><br><span class="line">sortStr = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> post_data.items():</span><br><span class="line">    sortStr += k + <span class="string">'='</span> + v</span><br><span class="line">payload=<span class="string">"&#123;\"read_ids\":\"714022189,602347340,609481236\"&#125;"</span></span><br><span class="line"></span><br><span class="line">endstr = salt + sortStr + payload + salt</span><br><span class="line">print(endstr)</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(endstr.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">signature = m.hexdigest()</span><br><span class="line"></span><br><span class="line">print(signature)</span><br><span class="line">params[<span class="string">'signature'</span>] = signature</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'KG-THash'</span>: <span class="string">'690978f'</span>,</span><br><span class="line">  <span class="string">'User-Agent'</span>: <span class="string">'Android810-AndroidPhone-11145-56-0-COMMENT-wifi'</span>,</span><br><span class="line">  <span class="string">'KG-RC'</span>: <span class="string">'4'</span>,</span><br><span class="line">  <span class="string">'KG-FAKE'</span>: <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">'KG-RF'</span>: <span class="string">'00984990'</span>,</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">  <span class="string">'Host'</span>: <span class="string">'m.comment.service.kugou.com'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, headers=headers, params= params, data=payload)</span><br><span class="line"></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>frida hook java 基础六层锁机</title>
    <url>/2022/03/23/frida_hook_java/</url>
    <content><![CDATA[<h3 id="六层锁机"><a href="#六层锁机" class="headerlink" title="六层锁机"></a>六层锁机</h3><h4 id="登录页"><a href="#登录页" class="headerlink" title="登录页"></a>登录页</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开app, 随意输入登录，根据页面提示 利用jadx搜索Login failed</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/frida_hook_java/6login.png" alt="jadx 搜索"><br><img src="/2022/03/23/frida_hook_java/6_login.png" alt="登录代码"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态分析jadx反编译代码  主要 需要com.example.androiddemo.Activity.LoginActivity.a 方法和 密码相同</span><br><span class="line">下面 编写 frida 脚本 主动调用java函数 打印结果</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.LoginActivity"</span>).a.overload(<span class="string">'java.lang.String'</span>, <span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.a(x,y);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"x y result"</span>, x ,y ,result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/frida_hook_java/6_login1.png" alt="结果"><br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 利用adb在页面焦点输入内容  username aaaa password  bb9d9016b60ef5ebe72e859d5a5f630c62fff00571361998267a3f6d7c12e482</span></span><br><span class="line">adb shell</span><br><span class="line">input text bb9d9016b60ef5ebe72e859d5a5f630c62fff00571361998267a3f6d7c12e482</span><br></pre></td></tr></table></figure></p>
<h4 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h4><p><img src="/2022/03/23/frida_hook_java/6_1.png" alt="第一关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态分析jadx反编译代码  需要 a 函数的返回结果等于 R4jSLLLLLLLLLLOrLE7&#x2F;5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL&#x3D;</span><br><span class="line">下面 编写 frida 脚本 主动修改a函数的返回值</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity1"</span>).a.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL="</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h4><p><img src="/2022/03/23/frida_hook_java/6_2.png" alt="第二关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态分析jadx反编译代码 static_bool_var 和 bool_var 都要为 true,实例方法 setBool_var ，静态方法 setStatic_bool_var</span><br><span class="line">下面 编写 frida 脚本 主动调用动态函数 需要在 Java.choose 中调用，静态函数直接调用</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity2"</span>).setStatic_bool_var();</span><br><span class="line">        Java.choose(<span class="string">"com.example.androiddemo.Activity.FridaActivity2"</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"find instance"</span>, instance);</span><br><span class="line">                instance.setBool_var();</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"search complete!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h4><p><img src="/2022/03/23/frida_hook_java/6_3.png" alt="第三关"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态分析jadx反编译代码 static_bool_var 和 bool_var console.log 都要为 true</span><br><span class="line">下面 编写 frida 脚本 主动调用修改实例成员变量，静态成员变量  ps(成员变量和函数名称一样是，成员变量前需要加_)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity3"</span>).static_bool_var.value = <span class="literal">true</span> ;</span><br><span class="line"></span><br><span class="line">        Java.choose(<span class="string">"com.example.androiddemo.Activity.FridaActivity3"</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"find instance"</span>, instance);</span><br><span class="line">                instance.bool_var.value = <span class="literal">true</span>;</span><br><span class="line">                instance._same_name_bool_var.value = <span class="literal">true</span>;</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"search complete!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h4><p><img src="/2022/03/23/frida_hook_java/6_4.png" alt="第四关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">内部类 需要$来表示   InnerClass.class.getDeclaredMethods() 枚举所有的方法</span><br></pre></td></tr></table></figure><br>，枚举类的函数并hook(getDeclaredMethods)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通解法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check1.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check2.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check3.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check4.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check5.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check6.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 枚举法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_42</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> class_name = <span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span> ;</span><br><span class="line">        <span class="keyword">var</span> InnerClass = Java.use(class_name);</span><br><span class="line">        <span class="keyword">var</span> all_methods = InnerClass.class.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;all_methods.length;i++)&#123;</span><br><span class="line">            <span class="comment">// console.log(all_methods[i]);</span></span><br><span class="line">            <span class="keyword">var</span> method = all_methods[i];</span><br><span class="line">            <span class="keyword">var</span> substring = method.toString().substr(method.toString().indexOf(class_name)+class_name.length+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> finalMethodString = substring.substr(<span class="number">0</span>,substring.indexOf(<span class="string">"("</span>));</span><br><span class="line">            <span class="built_in">console</span>.log(finalMethodString);</span><br><span class="line">            InnerClass[finalMethodString].implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h4><p><img src="/2022/03/23/frida_hook_java/6_5.png" alt="第五关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">切换classload</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 找到class</span></span><br><span class="line">        Java.choose(<span class="string">"com.example.androiddemo.Activity.FridaActivity5"</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"found instance getDynamicDexCheck :"</span>,instance.getDynamicDexCheck().$className);</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"search complete!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//  切换 ClassLoader</span></span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">loader</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(loader.findClass(<span class="string">"com.example.androiddemo.Dynamic.DynamicCheck"</span>))&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"Succefully found loader!"</span>,loader);</span><br><span class="line">                        Java.classFactory.loader = loader;  <span class="comment">//  切换 成当前的 ClassLoader</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"found error "</span>+error)</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="string">"enum completed!"</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Dynamic.DynamicCheck"</span>).check.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h4><p><img src="/2022/03/23/frida_hook_java/6_6.png" alt="第六关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">枚举class</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_6</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.Frida6.Frida6Class0"</span>).check.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span> &#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.Frida6.Frida6Class1"</span>).check.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span> &#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.Frida6.Frida6Class2"</span>).check.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span> &#125;; </span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_62</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">name,handle</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(name.toString().indexOf(<span class="string">"com.example.androiddemo.Activity.Frida6.Frida6"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"name"</span>,name);</span><br><span class="line">                    Java.use(name).check.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,onComplete()&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>objection 的基本使用</title>
    <url>/2022/03/23/objection/</url>
    <content><![CDATA[<h3 id="objection"><a href="#objection" class="headerlink" title="objection"></a>objection</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Frida只是提供了各种API供我们调用，在此基础之上可以实现具体的功能，比如禁用证书绑定之类的脚本，就是使用Frida的各种API来组合编写而成。于是有大佬将各种常见、常用的功能整合进一个工具，供我们直接在命令行中使用，这个工具便是objection。</span><br><span class="line">objection功能强大，命令众多，而且不用写一行代码，便可实现诸如内存搜索、类和模块搜索、方法hook打印参数返回值调用栈等常用功能，是一个非常方便的，逆向必备、内存漫游神器</span><br></pre></td></tr></table></figure>
<h4 id="1-开启非标准端口frida"><a href="#1-开启非标准端口frida" class="headerlink" title="1.开启非标准端口frida"></a>1.开启非标准端口frida</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;fs -l 0.0.0.0:8888</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/frida01.png" alt="frida特殊端口"></p>
<h4 id="2-查看objection日志"><a href="#2-查看objection日志" class="headerlink" title="2.查看objection日志"></a>2.查看objection日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat .objection&#x2F;objection.log  |grep -i frida</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion02.png" alt="查看objection日志"></p>
<h4 id="3-连接objecion"><a href="#3-连接objecion" class="headerlink" title="3.连接objecion"></a>3.连接objecion</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">objection 和frida 对应版本 需要 看时间</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;frida&#x2F;frida&#x2F;releases</span><br><span class="line">https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;objection&#x2F;#history</span><br><span class="line"></span><br><span class="line">#正常连接  objection -g com.android.settings explore</span><br><span class="line">#非正常端口连接   objection -N -h 192.168.2.57 -p 8888 -g com.android.settings explore</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion01.png" alt="非正常端口连接"></p>
<h4 id="4-查看内存中加载的库"><a href="#4-查看内存中加载的库" class="headerlink" title="4.查看内存中加载的库"></a>4.查看内存中加载的库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">memory list modules</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion03.png" alt="查看内存中加载的库"></p>
<h4 id="5-查看库的导出函数"><a href="#5-查看库的导出函数" class="headerlink" title="5.查看库的导出函数"></a>5.查看库的导出函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正常查看  memory list exports libssl.so</span><br><span class="line">文件导出  memory list exports libart.so --json &#x2F;root&#x2F;libart.json</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion04.png" alt="查看库的导出函数"></p>
<h4 id="6-在内存堆上搜索实例"><a href="#6-在内存堆上搜索实例" class="headerlink" title="6.在内存堆上搜索实例"></a>6.在内存堆上搜索实例</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">android heap search instances com.android.settings.DisplaySettings  --fresh</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion05.png" alt="在内存堆上搜索实例"></p>
<h4 id="7-调用实例的方法"><a href="#7-调用实例的方法" class="headerlink" title="7.调用实例的方法"></a>7.调用实例的方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android heap execute 0x23ba  getPreferenceScreenResId</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion06.png" alt="调用实例的方法"></p>
<h4 id="8-直接启动activity-直接进入该页面"><a href="#8-直接启动activity-直接进入该页面" class="headerlink" title="8.直接启动activity,直接进入该页面"></a>8.直接启动activity,直接进入该页面</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android intent launch_activity com.android.settings.DisplaySettings</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion07.png" alt="直接启动activity"></p>
<h4 id="9-查看当前可用的activity"><a href="#9-查看当前可用的activity" class="headerlink" title="9.查看当前可用的activity"></a>9.查看当前可用的activity</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking list activities</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion08.png" alt="查看当前可用的activity"></p>
<h4 id="10-列出内存中所有的类"><a href="#10-列出内存中所有的类" class="headerlink" title="10.列出内存中所有的类"></a>10.列出内存中所有的类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion09.png" alt="列出内存中所有的类"></p>
<h4 id="11-列出类的所有方法"><a href="#11-列出类的所有方法" class="headerlink" title="11.列出类的所有方法"></a>11.列出类的所有方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking list class_methods  com.android.settings.DisplaySettings</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion12.png" alt="列出类的所有方法"></p>
<h4 id="12-内存中搜索关键词所有的类"><a href="#12-内存中搜索关键词所有的类" class="headerlink" title="12.内存中搜索关键词所有的类"></a>12.内存中搜索关键词所有的类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking search classes display</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion10.png" alt="列出内存中所有的类"></p>
<h4 id="13-内存中搜索所有的方法"><a href="#13-内存中搜索所有的方法" class="headerlink" title="13.内存中搜索所有的方法"></a>13.内存中搜索所有的方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking search methods display</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion11.png" alt="内存中搜索所有的方法"></p>
<h4 id="14-hook类的所有方法"><a href="#14-hook类的所有方法" class="headerlink" title="14.hook类的所有方法"></a>14.hook类的所有方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking watch class android.bluetooth.BluetoothDevice</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion13.png" alt="hook方法的参数、返回值和调用栈"></p>
<h4 id="15-hook方法的参数、返回值和调用栈"><a href="#15-hook方法的参数、返回值和调用栈" class="headerlink" title="15.hook方法的参数、返回值和调用栈"></a>15.hook方法的参数、返回值和调用栈</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking watch class_method android.bluetooth.BluetoothDevice.equals --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method java.io.File.$init --dump-args</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion14.png" alt="hook方法的参数、返回值和调用栈"></p>
<h4 id="17-插件-Wallbreaker"><a href="#17-插件-Wallbreaker" class="headerlink" title="17.插件 Wallbreaker"></a>17.插件 <a href="https://github.com/hluwa/Wallbreaker" target="_blank" rel="noopener">Wallbreaker</a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载 git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;Wallbreaker.git</span><br></pre></td></tr></table></figure>
<h5 id="加载Wallbreaker"><a href="#加载Wallbreaker" class="headerlink" title="加载Wallbreaker"></a>加载Wallbreaker</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugin load &#x2F;root&#x2F;Desktop&#x2F;Wallbreaker</span><br></pre></td></tr></table></figure>
<h5 id="wallbreaker-查看类"><a href="#wallbreaker-查看类" class="headerlink" title="wallbreaker 查看类"></a>wallbreaker 查看类</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker classdump --fullname android.bluetooth.BluetoothDevice</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion15.png" alt="wallbreaker 查看类"></p>
<h3 id="实战-腾讯app漏洞第三题"><a href="#实战-腾讯app漏洞第三题" class="headerlink" title="实战: 腾讯app漏洞第三题"></a>实战: 腾讯app漏洞第三题</h3><h4 id="解压ab文件"><a href="#解压ab文件" class="headerlink" title="解压ab文件"></a>解压ab文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar ade.jar unpack 1.ab 1.tar </span><br><span class="line">tar xvf 1.tar</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/txs1.png" alt="解压ab文件"></p>
<h4 id="夜神模拟器上-安装-frida-server-x86"><a href="#夜神模拟器上-安装-frida-server-x86" class="headerlink" title="夜神模拟器上 安装 frida-server-x86"></a>夜神模拟器上 安装 frida-server-x86</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">adb push frida-server-12.8.0-android-x86 /data/local/tmp   </span><br><span class="line">adb shell</span><br><span class="line">cd /data/local/tmp</span><br><span class="line">chmod 777 *</span><br><span class="line">./frida-server-12.8.0-android-x86</span><br></pre></td></tr></table></figure>
<h4 id="打开jadx-静态分析"><a href="#打开jadx-静态分析" class="headerlink" title="打开jadx 静态分析"></a>打开jadx 静态分析</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在MainActivity onCreate 调用a方法  a方法总写数据库方法 getWritableDatabase</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/txs2.png" alt="静态分析"><br><img src="/2022/03/23/objection/txs4.png" alt="静态分析"></p>
<h4 id="在-AndroidManifest-xml-查看包名"><a href="#在-AndroidManifest-xml-查看包名" class="headerlink" title="在 AndroidManifest.xml 查看包名"></a>在 AndroidManifest.xml 查看包名</h4><p><img src="/2022/03/23/objection/txs3.png" alt="静态分析"></p>
<h4 id="objection-分析"><a href="#objection-分析" class="headerlink" title="objection 分析"></a>objection 分析</h4><p>打开objection<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">objection -g com.example.yaphetshan.tencentwelcome explore</span><br></pre></td></tr></table></figure></p>
<p>静态查看 net.sqlcipher.database.SQLiteOpenHelper类下的方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking list class_methods net.sqlcipher.database.SQLiteOpenHelper</span><br></pre></td></tr></table></figure><br><img src="/2022/03/23/objection/txs5.png" alt="静态查看"></p>
<p>动态查看 net.sqlcipher.database.SQLiteOpenHelper类下的方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugin load &#x2F;root&#x2F;Desktop&#x2F;Wallbreaker</span><br><span class="line">plugin wallbreaker classdump --fullname net.sqlcipher.database.SQLiteOpenHelper</span><br></pre></td></tr></table></figure><br><img src="/2022/03/23/objection/txs6.png" alt="动态查看"></p>
<ol>
<li>hook net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase</li>
<li>寻找MainActivity的实例</li>
<li>主动调用MainActivity的实例的a方法<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">android hooking watch class_method net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase --dump-args --dump-backtrace --dump-return </span><br><span class="line">android heap search instances com.example.yaphetshan.tencentwelcome.MainActivity</span><br><span class="line">android heap execute 0x100bda a</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/2022/03/23/objection/txs7.png" alt="主动调用"></p>
<p>DB Browser for SQLite 打开数据库 输入密码 ae56f99</p>
<p><img src="/2022/03/23/objection/txs8.png" alt="打开数据库"><br><img src="/2022/03/23/objection/txs9.png" alt="flag结果"></p>
<hr>
<h5 id="frida-hook"><a href="#frida-hook" class="headerlink" title="frida hook"></a>frida hook</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook 重载 </span></span><br><span class="line">        Java.use(<span class="string">"net.sqlcipher.database.SQLiteOpenHelper"</span>).getWritableDatabase.overload(<span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.getWritableDatabase(x);</span><br><span class="line">            <span class="comment">// 调用栈</span></span><br><span class="line">            <span class="built_in">console</span>.log(Java.use(<span class="string">"android.util.Log"</span>).getStackTraceString(Java.use(<span class="string">"java.lang.Throwable"</span>).$<span class="keyword">new</span>()));</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"xString,result"</span>,x,result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">        Java.use(<span class="string">"net.sqlcipher.database.SQLiteOpenHelper"</span>).getWritableDatabase.overload(<span class="string">'[C'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> result = <span class="keyword">this</span>.getWritableDatabase(x);</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"xCharSe,result"</span>,x,result);</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;)      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 调用实例，主动调用方法</span></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">"com.example.yaphetshan.tencentwelcome.MainActivity"</span>,&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"found insttance "</span>,instance);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"invoke instance.a "</span>,instance.a());</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"search completed !"</span>)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/txs10.png" alt="frida hook"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>objection</tag>
      </tags>
  </entry>
  <entry>
    <title>刷机</title>
    <url>/2022/03/27/%E5%88%B7%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="刷机："><a href="#刷机：" class="headerlink" title="刷机："></a>刷机：</h3><p>1.在 <a href="https://developers.google.com/android/images" target="_blank" rel="noopener">谷歌官方工厂镜像网站</a> 下载对应手机型号和版本的安装包</p>
<p><img src="/2022/03/27/%E5%88%B7%E6%9C%BA/1.png" alt="谷歌官方工厂镜像网站"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dl.google.com&#x2F;dl&#x2F;android&#x2F;aosp&#x2F;bullhead-n2g47o-factory-3ff32f55.zip</span><br><span class="line">7z x  bullhead-n2g47o-factory-3ff32f55.zip</span><br></pre></td></tr></table></figure></p>
<ol>
<li>手机最好电量充足,关机, 按住音量下键 和 关机键进入 bootloader, 刷系统</li>
</ol>
<p><img src="/2022/03/27/%E5%88%B7%E6%9C%BA/2.png" alt="bootloader"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd   bullhead-n2g47o-factory-3ff32f55</span><br><span class="line">.&#x2F;flash-all.sh</span><br></pre></td></tr></table></figure><br><img src="/2022/03/27/%E5%88%B7%E6%9C%BA/3.png" alt="成功"></p>
<p>3.手机刷成功后,一些语言,wifi,指纹类的信息设置</p>
<p><img src="/2022/03/27/%E5%88%B7%E6%9C%BA/4.png" alt="bootloader"></p>
<p>4.设置 —&gt; 系统 —&gt; 关于手机 —&gt; 版本号点击7下 —&gt; 返回 —&gt; 开发者选项 —&gt; usb调试</p>
<p><img src="/2022/03/27/%E5%88%B7%E6%9C%BA/5.png" alt="版本号"><br><img src="/2022/03/27/%E5%88%B7%E6%9C%BA/6.png" alt="usb调试"></p>
<ol>
<li><p>将 SuperSU（Magisk 同理） 推入手机, 手机重新进入bootloader,刷<a href="https://twrp.me/" target="_blank" rel="noopener">twrp</a>和搜集版本一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb push SR5-SuperSU-v2.82-SR5-20171001224502.zip &#x2F;sdcard&#x2F;</span><br><span class="line">adb reboot bootloader</span><br><span class="line">fastboot boot twrp-3.3.0-0-bullhead.img</span><br></pre></td></tr></table></figure>
</li>
<li><p>右滑 —&gt; install —&gt; 点击supersu —&gt; 右滑 —&gt;等待 —&gt; reboot system —&gt; 可以有root 权限<br>(PS: supersu 有时候刷不了，开机卡在Google页面)</p>
</li>
</ol>
<p><img src="/2022/03/27/%E5%88%B7%E6%9C%BA/7.png" alt="usb调试"><br><img src="/2022/03/27/%E5%88%B7%E6%9C%BA/8.png" alt="usb调试"><br><img src="/2022/03/27/%E5%88%B7%E6%9C%BA/9.png" alt="usb调试"></p>
<ol>
<li>wifi 感叹号解决<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【亲测有效】开机后wifi有感叹号, 时间无法同步解决办法 </span><br><span class="line">在手机的shell里以root用户执行：</span><br><span class="line"># settings put global captive_portal_http_url https:&#x2F;&#x2F;www.google.cn&#x2F;generate_204</span><br><span class="line"># settings put global captive_portal_https_url https:&#x2F;&#x2F;www.google.cn&#x2F;generate_204</span><br><span class="line"># settings put global ntp_server 1.hk.pool.ntp.org</span><br><span class="line"># reboot</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="pixel-andriod-8-1-0-twrp3-3-Magisk"><a href="#pixel-andriod-8-1-0-twrp3-3-Magisk" class="headerlink" title="pixel+ andriod 8.1.0 + twrp3.3 + Magisk"></a>pixel+ andriod 8.1.0 + twrp3.3 + Magisk</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">刷twrp，Magisk</span><br><span class="line">https:&#x2F;&#x2F;dl.twrp.me&#x2F;sailfish&#x2F;</span><br><span class="line">将 twrp 安装到手机</span><br><span class="line"></span><br><span class="line">1. adb push twrp-pixel-installer-sailfish-3.3.0-0.zip &#x2F;sdcard</span><br><span class="line">2.  将手机设置为fastboot模式，并且按动音量键切换至Recovery模式</span><br><span class="line">3.  fastboot boot twrp-3.3.0-0-sailfish.img</span><br><span class="line">4.  滑动下方的滑块，找到zip包，点击它（遇到坑，在sdcard下找不到zip包，重新push到&#x2F; 目录下）</span><br><span class="line">5.  点击Reboot System完成twrp（Magisk 同理）的刷入</span><br><span class="line"></span><br><span class="line">百度网盘环境</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1Jjm-u7kLUQsWqOgQkcvkYQ </span><br><span class="line">提取码：jl2f</span><br></pre></td></tr></table></figure>
<h4 id="n5x-刷安装10"><a href="#n5x-刷安装10" class="headerlink" title="n5x 刷安装10"></a>n5x 刷安装10</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;blissroms&#x2F;files&#x2F;Q&#x2F;bullhead&#x2F;</span><br><span class="line">下载 857.5 MB </span><br><span class="line">手机 音量向下键 关机键</span><br><span class="line">fastboot flash recovery twrp-3.3.0-0-bullhead.img </span><br><span class="line">adb push Bliss-v12.8-bullhead-OFFICIAL-20200612.zip &#x2F;sdcard&#x2F;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>刷机</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓逆向基础之抓包</title>
    <url>/2022/03/13/%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<p>记录一些安卓抓包的工具</p>
<h3 id="一-Charles-抓包"><a href="#一-Charles-抓包" class="headerlink" title="一. Charles 抓包"></a>一. Charles 抓包</h3><h4 id="1-charles-设置"><a href="#1-charles-设置" class="headerlink" title="1.charles 设置"></a>1.charles 设置</h4><p><a href="https://www.charlesproxy.com/download/" target="_blank" rel="noopener">charles安装网址</a></p>
<h5 id="proxy-—-gt-ssl-proxying-settings-—-gt-add-—-gt-设置"><a href="#proxy-—-gt-ssl-proxying-settings-—-gt-add-—-gt-设置" class="headerlink" title="proxy —&gt; ssl proxying settings —&gt; add —&gt; 设置 "></a>proxy —&gt; ssl proxying settings —&gt; add —&gt; 设置<em> </em></h5><p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img.png" alt="ssl设置"></p>
<h5 id="proxy-—-gt-ssl-settings"><a href="#proxy-—-gt-ssl-settings" class="headerlink" title="proxy —&gt; ssl settings"></a>proxy —&gt; ssl settings</h5><p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img_1.png" alt="img_1.png"></p>
<h4 id="2-手机设置"><a href="#2-手机设置" class="headerlink" title="2.手机设置"></a>2.手机设置</h4><h4 id="手机-WiFi设置http代理-在同一局域网"><a href="#手机-WiFi设置http代理-在同一局域网" class="headerlink" title="手机 WiFi设置http代理,在同一局域网"></a>手机 WiFi设置http代理,在同一局域网</h4><p>1.先查看电脑ip<br><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img_2.png" alt="img_2.png"><br>2.wifi —&gt; 修改网络 —&gt; 高级选项 —&gt; 代理 —&gt; 手动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在可以抓到http的包，但是https抓不到</span><br></pre></td></tr></table></figure></p>
<p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img_3.png" alt="img_3.png"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器输入 chls.pro&#x2F;ssl 下载证书，安装</span><br><span class="line">这样就可以抓到https的包了,百度一下就知道了 </span><br><span class="line">现在抓爱奇艺APP登录的包 抓不到, 那我们继续证书装到系统目录</span><br></pre></td></tr></table></figure></p>
<h4 id="3-将证书安装到系统目录"><a href="#3-将证书安装到系统目录" class="headerlink" title="3.将证书安装到系统目录"></a>3.将证书安装到系统目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect 192.168.31.88</span><br><span class="line">abd shell</span><br><span class="line">su</span><br><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added</span><br><span class="line">mount -o remount,rw &#x2F;system</span><br><span class="line">ls -alist 看哪个是最新安装的</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/charles.png" alt="证书安装到根目录"></p>
<h4 id="4-vpn软件-postern-设置"><a href="#4-vpn软件-postern-设置" class="headerlink" title="4.vpn软件 postern 设置"></a>4.vpn软件 postern 设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postern  设置配置代理，配置规则</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/p1.png" alt="配置代理"><br><img src="/2022/03/13/%E6%8A%93%E5%8C%85/p2.png" alt="配置规则"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但是安卓10 系统不能分区  需要用 magisk的MoveCertificates模块，会自动帮我们将证书安装到系统目录 https:&#x2F;&#x2F;blog.csdn.net&#x2F;fjh1997&#x2F;article&#x2F;details&#x2F;106756012</span><br><span class="line">postern 在安卓10上也不好使</span><br></pre></td></tr></table></figure>
<h4 id="另一个vpn软件-SagerNet"><a href="#另一个vpn软件-SagerNet" class="headerlink" title="另一个vpn软件 SagerNet"></a>另一个vpn软件 SagerNet</h4><p><a href="https://blog.seeflower.dev/archives/70/" target="_blank" rel="noopener">SagerNet</a></p>
<h4 id="5-双向验证例子-全国同一信用代码app"><a href="#5-双向验证例子-全国同一信用代码app" class="headerlink" title="5.双向验证例子 全国同一信用代码app"></a>5.双向验证例子 全国同一信用代码app</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将charles证书安装到系统,使用vpn 软件也不能抓到包，这是为什么？</span><br><span class="line">服务器验证客户端证书</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img4.jpg" alt="未抓到"><br>frida下载app 证书 dump_certificate.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uuid</span>(<span class="params">len, radix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chars = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> uuid = [], i;</span><br><span class="line">    radix = radix || chars.length;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (len) &#123;</span><br><span class="line">      <span class="comment">// Compact form</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) uuid[i] = chars[<span class="number">0</span> | <span class="built_in">Math</span>.random() * radix];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// rfc4122, version 4 form</span></span><br><span class="line">      <span class="keyword">var</span> r;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// rfc4122 requires these characters</span></span><br><span class="line">      uuid[<span class="number">8</span>] = uuid[<span class="number">13</span>] = uuid[<span class="number">18</span>] = uuid[<span class="number">23</span>] = <span class="string">'-'</span>;</span><br><span class="line">      uuid[<span class="number">14</span>] = <span class="string">'4'</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// Fill in random data. At i==19 set the high bits of clock sequence as</span></span><br><span class="line">      <span class="comment">// per rfc4122, sec. 4.1.5</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!uuid[i]) &#123;</span><br><span class="line">          r = <span class="number">0</span> | <span class="built_in">Math</span>.random() * <span class="number">16</span>;</span><br><span class="line">          uuid[i] = chars[(i == <span class="number">19</span>) ? (r &amp; <span class="number">0x3</span>) | <span class="number">0x8</span> : r];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> uuid.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">storeP12</span>(<span class="params">pri, p7, p12Path, p12Password</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> X509Certificate = Java.use(<span class="string">"java.security.cert.X509Certificate"</span>)</span><br><span class="line">            <span class="keyword">var</span> p7X509 = Java.cast(p7, X509Certificate);</span><br><span class="line">            <span class="keyword">var</span> chain = Java.array(<span class="string">"java.security.cert.X509Certificate"</span>, [p7X509])</span><br><span class="line">            <span class="keyword">var</span> ks = Java.use(<span class="string">"java.security.KeyStore"</span>).getInstance(<span class="string">"PKCS12"</span>, <span class="string">"BC"</span>);</span><br><span class="line">            ks.load(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            ks.setKeyEntry(<span class="string">"client"</span>, pri, Java.use(<span class="string">'java.lang.String'</span>).$<span class="keyword">new</span>(p12Password).toCharArray(), chain);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> out = Java.use(<span class="string">"java.io.FileOutputStream"</span>).$<span class="keyword">new</span>(p12Path);</span><br><span class="line">              ks.store(out, Java.use(<span class="string">'java.lang.String'</span>).$<span class="keyword">new</span>(p12Password).toCharArray())</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">"dump success!"</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exp) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(exp)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          <span class="comment">//在服务器校验客户端的情形下，帮助dump客户端证书，并保存为p12的格式，证书密码为mmb</span></span><br><span class="line">          Java.use(<span class="string">"java.security.KeyStore$PrivateKeyEntry"</span>).getPrivateKey.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.getPrivateKey()</span><br><span class="line">            <span class="keyword">var</span> packageName = Java.use(<span class="string">"android.app.ActivityThread"</span>).currentApplication().getApplicationContext().getPackageName();</span><br><span class="line">            storeP12(<span class="keyword">this</span>.getPrivateKey(), <span class="keyword">this</span>.getCertificate(), <span class="string">'/sdcard/Download/'</span> + packageName + uuid(<span class="number">10</span>, <span class="number">16</span>) + <span class="string">'.p12'</span>, <span class="string">'mmb'</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">          &#125;</span><br><span class="line">          Java.use(<span class="string">"java.security.KeyStore$PrivateKeyEntry"</span>).getCertificateChain.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.getCertificateChain()</span><br><span class="line">            <span class="keyword">var</span> packageName = Java.use(<span class="string">"android.app.ActivityThread"</span>).currentApplication().getApplicationContext().getPackageName();</span><br><span class="line">            storeP12(<span class="keyword">this</span>.getPrivateKey(), <span class="keyword">this</span>.getCertificate(), <span class="string">'/sdcard/Download/'</span> + packageName + uuid(<span class="number">10</span>, <span class="number">16</span>) + <span class="string">'.p12'</span>, <span class="string">'mmb'</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将手机上的证书pull电脑上，charles安装证书，成功到包</span><br></pre></td></tr></table></figure><br><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img5.jpg" alt="charles 安装证书"><br><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img6.jpg" alt="成功抓到包"></p>
<h3 id="二-mitmproxy"><a href="#二-mitmproxy" class="headerlink" title="二.mitmproxy"></a>二.mitmproxy</h3><p>mitmproxy电脑环境安装 参考崔庆才的博客,<a href="https://cuiqingcai.com/5391.html" target="_blank" rel="noopener">mitmproxy安装</a></p>
<h4 id="逍遥模拟器手机安装证书"><a href="#逍遥模拟器手机安装证书" class="headerlink" title="逍遥模拟器手机安装证书"></a>逍遥模拟器手机安装证书</h4><ol>
<li>电脑运行 mitmdump -p 8999  (端口号随意，不要冲突即可)</li>
<li>查看电脑ip Windows(ipconfig),Liunx(ifconfig)</li>
<li>电脑手机在同一局域网内，手机Wifi设置代理 <img src="/2022/03/13/%E6%8A%93%E5%8C%85/mitmproxy_1.png" alt="设置代理"></li>
<li>在浏览器输入mitm.it，下载证书<img src="/2022/03/13/%E6%8A%93%E5%8C%85/mitmproxy_2.png" alt="下载证书"></li>
<li>安装证书</li>
<li><p>当安装证书还是不行，抓不到数据需要把证书安装到跟目录下<br> <img src="/2022/03/13/%E6%8A%93%E5%8C%85/mitmproxy_0.jpg" alt="参考"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect 192.168.31.216</span><br><span class="line">adb shell</span><br><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added</span><br><span class="line">mount -o rw,remount &#x2F;system (安卓7，模拟器是安卓7，安卓8不一样mount -o remount,rw &#x2F;)</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mt.py 将带有aweme/v1/store/product/list链接的数据保存到redis</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">REDIS_HOST = <span class="string">"REDIS_HOST"</span></span><br><span class="line">REDIS_PORT = <span class="number">63791</span></span><br><span class="line">REDIS_ENCODING = <span class="string">'utf-8'</span></span><br><span class="line">red = Redis(host=REDIS_HOST, port=REDIS_PORT, password=<span class="string">"password"</span>, db=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span><span class="params">(flow)</span>:</span></span><br><span class="line">    response_data = flow.response</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'aweme/v1/store/product/list'</span> <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        json_data = json.loads(response_data.text)</span><br><span class="line">        print(json_data)</span><br><span class="line">        red.rpush(<span class="string">'dy:items'</span>, json.dumps(json_data))</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开启mitmproxy  mitmdump -s mt.py -p 8999 </span><br><span class="line">手机WIFI设置代理 (如果前面做了可以省略)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="三-HttpCanary"><a href="#三-HttpCanary" class="headerlink" title="三.HttpCanary"></a>三.HttpCanary</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HttpCanary支持对HTTP协议包的抓取和注入。使用这款App，您将能够非常非常方便的测试Rest API接口请求。同时，HttpCanary提供了各式各样的数据浏览功能，比如Raw视图、Hex视图、Json视图等等。</span><br></pre></td></tr></table></figure>
<h3 id="四-HTTP-Toolkit"><a href="#四-HTTP-Toolkit" class="headerlink" title="四.HTTP Toolkit"></a>四.<a href="https://httptoolkit.tech/" target="_blank" rel="noopener">HTTP Toolkit</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、下载它的pc端,window和 mac的都有。</span><br><span class="line">2、下载它的Android App安装</span><br><span class="line">3、PC端上点击 Android device via QR code,出现一个二维码</span><br><span class="line">4、Android 端扫描这个二维码,会自动 开启vpn,然后提示你安装证书,（Android7以上要装magisk的Move Certificates,把证书搞到系统证书区, 重启就生效）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
</search>
