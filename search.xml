<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>frida hook java 基础六层锁机</title>
    <url>/2022/03/23/frida_hook_java/</url>
    <content><![CDATA[<h3 id="六层锁机"><a href="#六层锁机" class="headerlink" title="六层锁机"></a>六层锁机</h3><h4 id="登录页"><a href="#登录页" class="headerlink" title="登录页"></a>登录页</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开app, 随意输入登录，根据页面提示 利用jadx搜索Login failed</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/frida_hook_java/6login.png" alt="jadx 搜索"><br><img src="/2022/03/23/frida_hook_java/6_login.png" alt="登录代码"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态分析jadx反编译代码  主要 需要com.example.androiddemo.Activity.LoginActivity.a 方法和 密码相同</span><br><span class="line">下面 编写 frida 脚本 主动调用java函数 打印结果</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.LoginActivity"</span>).a.overload(<span class="string">'java.lang.String'</span>, <span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.a(x,y);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"x y result"</span>, x ,y ,result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/frida_hook_java/6_login1.png" alt="结果"><br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 利用adb在页面焦点输入内容  username aaaa password  bb9d9016b60ef5ebe72e859d5a5f630c62fff00571361998267a3f6d7c12e482</span></span><br><span class="line">adb shell</span><br><span class="line">input text bb9d9016b60ef5ebe72e859d5a5f630c62fff00571361998267a3f6d7c12e482</span><br></pre></td></tr></table></figure></p>
<h4 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h4><p><img src="/2022/03/23/frida_hook_java/6_1.png" alt="第一关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态分析jadx反编译代码  需要 a 函数的返回结果等于 R4jSLLLLLLLLLLOrLE7&#x2F;5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL&#x3D;</span><br><span class="line">下面 编写 frida 脚本 主动修改a函数的返回值</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity1"</span>).a.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL="</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h4><p><img src="/2022/03/23/frida_hook_java/6_2.png" alt="第二关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态分析jadx反编译代码 static_bool_var 和 bool_var 都要为 true,实例方法 setBool_var ，静态方法 setStatic_bool_var</span><br><span class="line">下面 编写 frida 脚本 主动调用动态函数 需要在 Java.choose 中调用，静态函数直接调用</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity2"</span>).setStatic_bool_var();</span><br><span class="line">        Java.choose(<span class="string">"com.example.androiddemo.Activity.FridaActivity2"</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"find instance"</span>, instance);</span><br><span class="line">                instance.setBool_var();</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"search complete!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h4><p><img src="/2022/03/23/frida_hook_java/6_3.png" alt="第三关"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态分析jadx反编译代码 static_bool_var 和 bool_var console.log 都要为 true</span><br><span class="line">下面 编写 frida 脚本 主动调用修改实例成员变量，静态成员变量  ps(成员变量和函数名称一样是，成员变量前需要加_)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity3"</span>).static_bool_var.value = <span class="literal">true</span> ;</span><br><span class="line"></span><br><span class="line">        Java.choose(<span class="string">"com.example.androiddemo.Activity.FridaActivity3"</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"find instance"</span>, instance);</span><br><span class="line">                instance.bool_var.value = <span class="literal">true</span>;</span><br><span class="line">                instance._same_name_bool_var.value = <span class="literal">true</span>;</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"search complete!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h4><p><img src="/2022/03/23/frida_hook_java/6_4.png" alt="第四关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">内部类 需要$来表示   InnerClass.class.getDeclaredMethods() 枚举所有的方法</span><br></pre></td></tr></table></figure><br>，枚举类的函数并hook(getDeclaredMethods)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通解法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check1.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check2.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check3.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check4.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check5.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span>).check6.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 枚举法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_42</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> class_name = <span class="string">"com.example.androiddemo.Activity.FridaActivity4$InnerClasses"</span> ;</span><br><span class="line">        <span class="keyword">var</span> InnerClass = Java.use(class_name);</span><br><span class="line">        <span class="keyword">var</span> all_methods = InnerClass.class.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;all_methods.length;i++)&#123;</span><br><span class="line">            <span class="comment">// console.log(all_methods[i]);</span></span><br><span class="line">            <span class="keyword">var</span> method = all_methods[i];</span><br><span class="line">            <span class="keyword">var</span> substring = method.toString().substr(method.toString().indexOf(class_name)+class_name.length+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> finalMethodString = substring.substr(<span class="number">0</span>,substring.indexOf(<span class="string">"("</span>));</span><br><span class="line">            <span class="built_in">console</span>.log(finalMethodString);</span><br><span class="line">            InnerClass[finalMethodString].implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h4><p><img src="/2022/03/23/frida_hook_java/6_5.png" alt="第五关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">切换classload</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 找到class</span></span><br><span class="line">        Java.choose(<span class="string">"com.example.androiddemo.Activity.FridaActivity5"</span>,&#123;</span><br><span class="line">            onMatch: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"found instance getDynamicDexCheck :"</span>,instance.getDynamicDexCheck().$className);</span><br><span class="line">            &#125;, <span class="attr">onComplete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"search complete!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//  切换 ClassLoader</span></span><br><span class="line">        Java.enumerateClassLoaders(&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">loader</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(loader.findClass(<span class="string">"com.example.androiddemo.Dynamic.DynamicCheck"</span>))&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"Succefully found loader!"</span>,loader);</span><br><span class="line">                        Java.classFactory.loader = loader;  <span class="comment">//  切换 成当前的 ClassLoader</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"found error "</span>+error)</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="string">"enum completed!"</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Dynamic.DynamicCheck"</span>).check.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h4><p><img src="/2022/03/23/frida_hook_java/6_6.png" alt="第六关"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">枚举class</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_6</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.Frida6.Frida6Class0"</span>).check.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span> &#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.Frida6.Frida6Class1"</span>).check.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span> &#125;;</span><br><span class="line">        Java.use(<span class="string">"com.example.androiddemo.Activity.Frida6.Frida6Class2"</span>).check.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span> &#125;; </span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">level_62</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.enumerateLoadedClasses(&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">name,handle</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(name.toString().indexOf(<span class="string">"com.example.androiddemo.Activity.Frida6.Frida6"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"name"</span>,name);</span><br><span class="line">                    Java.use(name).check.implementation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,onComplete()&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>Android逆向之某物newSign</title>
    <url>/2022/03/21/dewu/</url>
    <content><![CDATA[<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app version: 4.69.5</span><br><span class="line">手机: Piexl3 XL  Android 10 </span><br><span class="line">抓包: charles + SagerNet</span><br><span class="line">用到的工具: jadx, frida, ida</span><br></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.利用 charles + SagerNet, 抓详商品详情页的包，很明显 newSign就是我们要分析的参数</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img.png" alt="抓包"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.打开心爱的jadx 搜索 &quot;newSign&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img_1.png" alt="jadx搜索"><br><img src="/2022/03/21/dewu/img_2.png" alt="jadx搜索"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 确定java成加密函数位置， 上我们的frida 看看效果</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hook_newSign</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> RequestUtilsCls = Java.use(<span class="string">'com.shizhuang.duapp.common.utils.RequestUtils'</span>);</span><br><span class="line"></span><br><span class="line">		RequestUtilsCls.a.overload(<span class="string">'java.util.Map'</span>, <span class="string">'long'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> rc = <span class="keyword">this</span>.a(a,b);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"a= "</span> + a.entrySet().toArray());</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"b= "</span> + b);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"a &gt;&gt;&gt; rc= "</span> + rc);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> rc ;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		RequestUtilsCls.b.overload(<span class="string">'java.util.Map'</span>, <span class="string">'long'</span>).implementation = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> rc = <span class="keyword">this</span>.b(a,b);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"a= "</span> + a.entrySet().toArray());</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"b= "</span> + b);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"b &gt;&gt;&gt; rc= "</span> + rc);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> rc ;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		RequestUtilsCls.c.implementation = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">var</span> rc = <span class="keyword">this</span>.c(a,b);</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"a= "</span> + a.entrySet().toArray());</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"b= "</span> + b);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"c &gt;&gt;&gt; rc= "</span> + rc);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> rc ;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img_4.png" alt="抓包"><br><img src="/2022/03/21/dewu/img_5.png" alt="frida"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. charles 抓包和 frida hook 的值是一样的</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img_3.png" alt="jadx搜索"><br><img src="/2022/03/21/dewu/img_6.png" alt="jadx搜索"><br><img src="/2022/03/21/dewu/img_7.png" alt="jadx搜索"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5.  通过jadx 分析可知  </span><br><span class="line">    有map传一些参数 在加上 uuid等参数结果 进行排序在</span><br><span class="line">    在调用native encodeByte方法加密后的结果</span><br><span class="line">    在进行MD5加密</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6. 通过ida 分析JNIEncrypt.so  是不同aes  利用frida hook so</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/21/dewu/img_8.png" alt="img_8.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookencodeByte</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> encrypt_addr = Module.findExportByName(<span class="string">'libJNIEncrypt.so'</span>,<span class="string">'AES_128_ECB_PKCS5Padding_Encrypt'</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'encrypt_addr'</span>,encrypt_addr);</span><br><span class="line">	<span class="keyword">if</span>(encrypt_addr)&#123;</span><br><span class="line">	  Interceptor.attach(encrypt_addr,&#123;</span><br><span class="line">		onEnter:<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line">		  <span class="built_in">console</span>.log(<span class="string">"arg0"</span>,args[<span class="number">0</span>].readCString());</span><br><span class="line">		  <span class="built_in">console</span>.log(<span class="string">"arg1"</span>,args[<span class="number">1</span>].readCString());</span><br><span class="line">		   </span><br><span class="line">		  <span class="comment">// var byteArray = args[0].readByteArray(200);</span></span><br><span class="line">		&#125;,</span><br><span class="line">		onLeave:<span class="function"><span class="keyword">function</span>(<span class="params">retval</span>)</span>&#123;</span><br><span class="line">		  <span class="built_in">console</span>.log(<span class="string">"result"</span>,retval.readCString());</span><br><span class="line">		&#125;</span><br><span class="line">	  &#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hook 的结果</span><br><span class="line"></span><br><span class="line">arg0 challengecf4224d39199d7017732c4aa5c0fa589loginTokenplatformandroidresult0serverStatus1timestamp1646594165319uuidb4f11c0b0518dd0ev4.69.5</span><br><span class="line">arg1 d245a0ba8d678a61</span><br><span class="line">result A5855EjJgrjeqGjxyCv7pRaG6k3hkxZxDuivETnxkXFd6XXU01lZIAn4PHmhL0sVXi04qk3dcDCGELQKDYtgZs&#x2F;shP7O8MxJkrDGX5Z7IVP6oeRRKF0GbSL9aaJnLpyUKdxTLvfU4Z6bXv7btRBrQZzP9Aw2U8j&#x2F;aY8u+dxdWXGnmOcWBZJM5nr3QZSBtpG6</span><br></pre></td></tr></table></figure>
<p>打开加密网址<a href="https://gchq.github.io/CyberChef/" target="_blank" rel="noopener">CyberChef</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发现 so 加密就是普通的aes ecs PKCS5Padding 加密</span><br></pre></td></tr></table></figure><br><img src="/2022/03/21/dewu/img_9.png" alt="img_9.png"></p>
<p>python版 aes<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncryptDate</span>:</span></span><br><span class="line">    <span class="comment"># AEC CBC BASE64</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.key = key  <span class="comment"># 初始化密钥</span></span><br><span class="line">        self.length = AES.block_size  <span class="comment"># 初始化数据块大小</span></span><br><span class="line">        self.aes = AES.new(self.key, AES.MODE_ECB)  <span class="comment"># 初始化AES,ECB模式的实例</span></span><br><span class="line">        <span class="comment"># 截断函数，去除填充的字符</span></span><br><span class="line">        self.unpad = <span class="keyword">lambda</span> date: date[<span class="number">0</span>:-ord(date[<span class="number">-1</span>])]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        #填充函数，使被加密数据的字节码长度是block_size的整数倍</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        count = len(text.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        add = self.length - (count % self.length)</span><br><span class="line">        entext = text + (chr(add) * add)</span><br><span class="line">        <span class="keyword">return</span> entext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, encrData)</span>:</span>  <span class="comment"># 加密函数</span></span><br><span class="line">        res = self.aes.encrypt(self.pad(encrData).encode(<span class="string">"utf8"</span>))</span><br><span class="line">        msg = (base64.b64encode(res)).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, decrData)</span>:</span>  <span class="comment"># 解密函数</span></span><br><span class="line">        res = base64.decodebytes(decrData.encode(<span class="string">"utf8"</span>))</span><br><span class="line">        msg = self.aes.decrypt(res).decode(<span class="string">"utf8"</span>)</span><br><span class="line">        <span class="keyword">return</span> self.unpad(msg)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不过得物难点是在 极验点选 和 数美风控上</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Auto.js结合 Mimtproxy爬取抖音店铺数据</title>
    <url>/2022/03/20/Autojs/</url>
    <content><![CDATA[<h3 id="Auto-js结合-Mimtproxy爬取抖音店铺数据"><a href="#Auto-js结合-Mimtproxy爬取抖音店铺数据" class="headerlink" title="Auto.js结合 Mimtproxy爬取抖音店铺数据"></a>Auto.js结合 Mimtproxy爬取抖音店铺数据</h3><h4 id="软件的安装"><a href="#软件的安装" class="headerlink" title="软件的安装"></a>软件的安装</h4><h5 id="1-Auto-js"><a href="#1-Auto-js" class="headerlink" title="1.Auto.js"></a>1.Auto.js</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Auto.js是Android上支持Node.js的JavaScript自动化和编程软件。</span><br><span class="line">由于auto.js被大量用于黑产目前作者，不支持，不维护免费版。只有维护付费版Auto.js Pro。</span><br></pre></td></tr></table></figure>
<p>1.模拟器安装是AutoJs4.1.0.apk免费版<br>auto.js 安装时开启无障碍服务<br><img src="/2022/03/20/Autojs/img.png" alt="img.png"><br>可以设置 按音量向上建停止代码，防止写无限循环推不出来<br>2.电脑端安装vscode<br>安装auto.js插件，输入如hyb1996，将两个插件进行安装<br><img src="/2022/03/20/Autojs/img_3.png" alt="安装插件"></p>
<h5 id="2-mitmproxy-安装"><a href="#2-mitmproxy-安装" class="headerlink" title="2.mitmproxy 安装"></a>2.mitmproxy 安装</h5><p>mitmproxy电脑环境安装 参考崔庆才的博客,<a href="https://cuiqingcai.com/5391.html" target="_blank" rel="noopener">mitmproxy安装</a><br>逍遥模拟器手机安装证书 </p>
<ol>
<li>电脑运行 mitmdump -p 8999  (端口号随意，不要冲突即可)</li>
<li>查看电脑ip Windows(ipconfig),Liunx(ifconfig)</li>
<li>电脑手机在同一局域网内，手机Wifi设置代理 <img src="/2022/03/20/Autojs/img_1.png" alt="设置代理"></li>
<li>在浏览器输入mitm.it，下载证书<img src="/2022/03/20/Autojs/img_2.png" alt="下载证书"></li>
<li>安装证书</li>
<li>当安装证书还是不行，抓不到数据需要把证书安装到跟目录下<br> 模拟器安装wifiadb(一个adb可以连接的软件)<br> <img src="/2022/03/20/Autojs/img_0.jpg" alt="参考"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect 192.168.31.216</span><br><span class="line">adb shell</span><br><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added</span><br><span class="line">mount -o rw,remount &#x2F;system (安卓7，模拟器是安卓7，安卓8不一样mount -o remount,rw &#x2F;)</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h4><h5 id="1-VScode-编写"><a href="#1-VScode-编写" class="headerlink" title="1. VScode 编写"></a>1. VScode 编写</h5><p>语法可参考 <a href="https://pro.autojs.org/docs/#/zh-cn/?id=%e7%bb%bc%e8%bf%b0" target="_blank" rel="noopener">官网网址</a><br>视频教学可以参考<a href="https://www.bilibili.com/video/BV1pQ4y1R7Us?p=1" target="_blank" rel="noopener">Auto.js从入门到精通</a></p>
<p>自动化代码 demo.js (不同手机，代码可能不适用)<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_shop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;className(<span class="string">"androidx.recyclerview.widget.RecyclerView"</span>).scrollable(<span class="literal">true</span>).depth(<span class="number">15</span>).findOne().children().forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> target = child.findOne(className(<span class="string">"android.widget.FrameLayout"</span>).depth(<span class="number">22</span>));</span><br><span class="line">        click(target.bounds().centerX(),target.bounds().centerY())</span><br><span class="line">        sleep(<span class="number">3000</span>) </span><br><span class="line">        click_text(<span class="string">'进店'</span>);</span><br><span class="line">        sleep(<span class="number">3000</span>)</span><br><span class="line">        click_text(<span class="string">'商品'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"出现错误"</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click_text</span>(<span class="params">str1</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 找到文字点击</span></span><br><span class="line">    text(str1).findOne()  </span><br><span class="line">    <span class="built_in">console</span>.log(str1)</span><br><span class="line">    click(str1)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">swipe_down</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 向下滑</span></span><br><span class="line">    <span class="keyword">var</span> i =<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">        <span class="keyword">var</span> finish = id(<span class="string">"ih6"</span>).exists()</span><br><span class="line">        <span class="keyword">if</span> (finish) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swipe(device.width / <span class="number">2</span>, <span class="number">1000</span>, device.width / <span class="number">2</span>, <span class="number">50</span>, <span class="number">2000</span>);</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeApp</span>(<span class="params">packagename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sh = <span class="keyword">new</span> Shell(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//注册一个对象运用shell命令，true(真) 以root权限运行代码，默认为falae假</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"am force-stop"</span>+<span class="string">" "</span>+packagename)</span><br><span class="line">    sh.exec(<span class="string">"am force-stop"</span>+<span class="string">" "</span>+packagename);<span class="comment">//执行代码运行中属于异步运行</span></span><br><span class="line">    <span class="comment">//上面值com.android.browser是浏览器的包名。自行修改成想停止软件的包名</span></span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//给点延迟让前面的运行命令，一会软件就会关闭</span></span><br><span class="line">    sh.exit;</span><br><span class="line">    <span class="comment">//退出Shell命令，正在执行的命令会被强制退出。所以上面加延迟</span></span><br><span class="line">    <span class="comment">// console.log("抖音");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"start"</span>)</span><br><span class="line">closeApp(<span class="string">"com.ss.android.ugc.aweme"</span>) <span class="comment">//关闭抖音</span></span><br><span class="line">sleep(<span class="number">1500</span>)</span><br><span class="line">home();</span><br><span class="line">sleep(<span class="number">1500</span>);</span><br><span class="line"><span class="comment">// click('抖音');</span></span><br><span class="line">launchApp(<span class="string">"抖音"</span>); <span class="comment">// 打开抖音</span></span><br><span class="line">sleep(<span class="number">5000</span>);</span><br><span class="line">click(<span class="string">"以后再说"</span>); <span class="comment">// app提示升级</span></span><br><span class="line">click(<span class="string">"我知道了"</span>); <span class="comment">// 青少年模式</span></span><br><span class="line">click_text(<span class="string">'我'</span>);  <span class="comment">// 点击我</span></span><br><span class="line">sleep(<span class="number">1500</span>);</span><br><span class="line">click_text(<span class="string">'关注'</span>); <span class="comment">// 点击关注</span></span><br><span class="line">sleep(<span class="number">2000</span>)</span><br><span class="line">click_text(<span class="string">"babycare官方旗舰店"</span>) <span class="comment">// 点击babycare官方旗舰店</span></span><br><span class="line">sleep(<span class="number">2000</span>);</span><br><span class="line">click_text(<span class="string">"店铺商品"</span>)</span><br><span class="line">sleep(<span class="number">2000</span>);</span><br><span class="line">click_text(<span class="string">"商品"</span>)</span><br><span class="line">sleep(<span class="number">2000</span>);</span><br><span class="line">swipe_down() <span class="comment">// 下滑</span></span><br><span class="line">closeApp(<span class="string">"com.ss.android.ugc.aweme"</span>)</span><br><span class="line">toast(<span class="string">'hello world!'</span>)</span><br></pre></td></tr></table></figure></p>
<h5 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h5><p>mt.py 将带有aweme/v1/store/product/list链接的数据保存到redis<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">REDIS_HOST = <span class="string">"REDIS_HOST"</span></span><br><span class="line">REDIS_PORT = <span class="number">63791</span></span><br><span class="line">REDIS_ENCODING = <span class="string">'utf-8'</span></span><br><span class="line">red = Redis(host=REDIS_HOST, port=REDIS_PORT, password=<span class="string">"password"</span>, db=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span><span class="params">(flow)</span>:</span></span><br><span class="line">    response_data = flow.response</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'aweme/v1/store/product/list'</span> <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        json_data = json.loads(response_data.text)</span><br><span class="line">        print(json_data)</span><br><span class="line">        red.rpush(<span class="string">'dy:items'</span>, json.dumps(json_data))</span><br></pre></td></tr></table></figure></p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><ol>
<li>开启auto.js服务 vscode Ctrl+shift+p  点击 Auto.js:Start Server<br> 可能会出现问题:9317端口是未打开的<br> 防火墙-&gt;高级设置-&gt;入站规则-&gt;新建规则-&gt;规则类型：TCP协议，9317端口，然后下一步，下一步，名称自定义</li>
<li>开启mitmproxy  mitmdump -s mt.py -p 8999 </li>
<li>手机WIFI设置代理 (如果前面做了可以省略)</li>
<li>auto.js APP连接电脑<br><img src="/2022/03/20/Autojs/img_5.png" alt="连接电脑.png"><br>5.运行auto.js任务  vscode Ctrl+shift+p  点击 Auto.js:Start Run<br><img src="/2022/03/20/Autojs/img_7.png" alt="运行效果"></li>
</ol>
<h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>vscode Ctrl+shift+p  点击 Auto.js:Save On Device 代码就安装到auto.js App中<br>在App 中demo.js设置定时任务 如图<img src="/2022/03/20/Autojs/img_9.png" alt="img_9.png"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>objection 的基本使用</title>
    <url>/2022/03/23/objection/</url>
    <content><![CDATA[<h3 id="objection"><a href="#objection" class="headerlink" title="objection"></a>objection</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Frida只是提供了各种API供我们调用，在此基础之上可以实现具体的功能，比如禁用证书绑定之类的脚本，就是使用Frida的各种API来组合编写而成。于是有大佬将各种常见、常用的功能整合进一个工具，供我们直接在命令行中使用，这个工具便是objection。</span><br><span class="line">objection功能强大，命令众多，而且不用写一行代码，便可实现诸如内存搜索、类和模块搜索、方法hook打印参数返回值调用栈等常用功能，是一个非常方便的，逆向必备、内存漫游神器</span><br></pre></td></tr></table></figure>
<h4 id="1-开启非标准端口frida"><a href="#1-开启非标准端口frida" class="headerlink" title="1.开启非标准端口frida"></a>1.开启非标准端口frida</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;fs -l 0.0.0.0:8888</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/frida01.png" alt="frida特殊端口"></p>
<h4 id="2-查看objection日志"><a href="#2-查看objection日志" class="headerlink" title="2.查看objection日志"></a>2.查看objection日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat .objection&#x2F;objection.log  |grep -i frida</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion02.png" alt="查看objection日志"></p>
<h4 id="3-连接objecion"><a href="#3-连接objecion" class="headerlink" title="3.连接objecion"></a>3.连接objecion</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">objection 和frida 对应版本 需要 看时间</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;frida&#x2F;frida&#x2F;releases</span><br><span class="line">https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;objection&#x2F;#history</span><br><span class="line"></span><br><span class="line">#正常连接  objection -g com.android.settings explore</span><br><span class="line">#非正常端口连接   objection -N -h 192.168.2.57 -p 8888 -g com.android.settings explore</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion01.png" alt="非正常端口连接"></p>
<h4 id="4-查看内存中加载的库"><a href="#4-查看内存中加载的库" class="headerlink" title="4.查看内存中加载的库"></a>4.查看内存中加载的库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">memory list modules</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion03.png" alt="查看内存中加载的库"></p>
<h4 id="5-查看库的导出函数"><a href="#5-查看库的导出函数" class="headerlink" title="5.查看库的导出函数"></a>5.查看库的导出函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正常查看  memory list exports libssl.so</span><br><span class="line">文件导出  memory list exports libart.so --json &#x2F;root&#x2F;libart.json</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion04.png" alt="查看库的导出函数"></p>
<h4 id="6-在内存堆上搜索实例"><a href="#6-在内存堆上搜索实例" class="headerlink" title="6.在内存堆上搜索实例"></a>6.在内存堆上搜索实例</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">android heap search instances com.android.settings.DisplaySettings  --fresh</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion05.png" alt="在内存堆上搜索实例"></p>
<h4 id="7-调用实例的方法"><a href="#7-调用实例的方法" class="headerlink" title="7.调用实例的方法"></a>7.调用实例的方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android heap execute 0x23ba  getPreferenceScreenResId</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion06.png" alt="调用实例的方法"></p>
<h4 id="8-直接启动activity-直接进入该页面"><a href="#8-直接启动activity-直接进入该页面" class="headerlink" title="8.直接启动activity,直接进入该页面"></a>8.直接启动activity,直接进入该页面</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android intent launch_activity com.android.settings.DisplaySettings</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion07.png" alt="直接启动activity"></p>
<h4 id="9-查看当前可用的activity"><a href="#9-查看当前可用的activity" class="headerlink" title="9.查看当前可用的activity"></a>9.查看当前可用的activity</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking list activities</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion08.png" alt="查看当前可用的activity"></p>
<h4 id="10-列出内存中所有的类"><a href="#10-列出内存中所有的类" class="headerlink" title="10.列出内存中所有的类"></a>10.列出内存中所有的类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion09.png" alt="列出内存中所有的类"></p>
<h4 id="11-列出类的所有方法"><a href="#11-列出类的所有方法" class="headerlink" title="11.列出类的所有方法"></a>11.列出类的所有方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking list class_methods  com.android.settings.DisplaySettings</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion12.png" alt="列出类的所有方法"></p>
<h4 id="12-内存中搜索关键词所有的类"><a href="#12-内存中搜索关键词所有的类" class="headerlink" title="12.内存中搜索关键词所有的类"></a>12.内存中搜索关键词所有的类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking search classes display</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion10.png" alt="列出内存中所有的类"></p>
<h4 id="13-内存中搜索所有的方法"><a href="#13-内存中搜索所有的方法" class="headerlink" title="13.内存中搜索所有的方法"></a>13.内存中搜索所有的方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking search methods display</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion11.png" alt="内存中搜索所有的方法"></p>
<h4 id="14-hook类的所有方法"><a href="#14-hook类的所有方法" class="headerlink" title="14.hook类的所有方法"></a>14.hook类的所有方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking watch class android.bluetooth.BluetoothDevice</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion13.png" alt="hook方法的参数、返回值和调用栈"></p>
<h4 id="15-hook方法的参数、返回值和调用栈"><a href="#15-hook方法的参数、返回值和调用栈" class="headerlink" title="15.hook方法的参数、返回值和调用栈"></a>15.hook方法的参数、返回值和调用栈</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking watch class_method android.bluetooth.BluetoothDevice.equals --dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method java.io.File.$init --dump-args</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion14.png" alt="hook方法的参数、返回值和调用栈"></p>
<h4 id="17-插件-Wallbreaker"><a href="#17-插件-Wallbreaker" class="headerlink" title="17.插件 Wallbreaker"></a>17.插件 <a href="https://github.com/hluwa/Wallbreaker" target="_blank" rel="noopener">Wallbreaker</a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载 git clone https:&#x2F;&#x2F;github.com&#x2F;hluwa&#x2F;Wallbreaker.git</span><br></pre></td></tr></table></figure>
<h5 id="加载Wallbreaker"><a href="#加载Wallbreaker" class="headerlink" title="加载Wallbreaker"></a>加载Wallbreaker</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugin load &#x2F;root&#x2F;Desktop&#x2F;Wallbreaker</span><br></pre></td></tr></table></figure>
<h5 id="wallbreaker-查看类"><a href="#wallbreaker-查看类" class="headerlink" title="wallbreaker 查看类"></a>wallbreaker 查看类</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker classdump --fullname android.bluetooth.BluetoothDevice</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/objecion15.png" alt="wallbreaker 查看类"></p>
<h3 id="实战-腾讯app漏洞第三题"><a href="#实战-腾讯app漏洞第三题" class="headerlink" title="实战: 腾讯app漏洞第三题"></a>实战: 腾讯app漏洞第三题</h3><h4 id="解压ab文件"><a href="#解压ab文件" class="headerlink" title="解压ab文件"></a>解压ab文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar ade.jar unpack 1.ab 1.tar </span><br><span class="line">tar xvf 1.tar</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/txs1.png" alt="解压ab文件"></p>
<h4 id="夜神模拟器上-安装-frida-server-x86"><a href="#夜神模拟器上-安装-frida-server-x86" class="headerlink" title="夜神模拟器上 安装 frida-server-x86"></a>夜神模拟器上 安装 frida-server-x86</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">adb push frida-server-12.8.0-android-x86 /data/local/tmp   </span><br><span class="line">adb shell</span><br><span class="line">cd /data/local/tmp</span><br><span class="line">chmod 777 *</span><br><span class="line">./frida-server-12.8.0-android-x86</span><br></pre></td></tr></table></figure>
<h4 id="打开jadx-静态分析"><a href="#打开jadx-静态分析" class="headerlink" title="打开jadx 静态分析"></a>打开jadx 静态分析</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在MainActivity onCreate 调用a方法  a方法总写数据库方法 getWritableDatabase</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/txs2.png" alt="静态分析"><br><img src="/2022/03/23/objection/txs4.png" alt="静态分析"></p>
<h4 id="在-AndroidManifest-xml-查看包名"><a href="#在-AndroidManifest-xml-查看包名" class="headerlink" title="在 AndroidManifest.xml 查看包名"></a>在 AndroidManifest.xml 查看包名</h4><p><img src="/2022/03/23/objection/txs3.png" alt="静态分析"></p>
<h4 id="objection-分析"><a href="#objection-分析" class="headerlink" title="objection 分析"></a>objection 分析</h4><p>打开objection<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">objection -g com.example.yaphetshan.tencentwelcome explore</span><br></pre></td></tr></table></figure></p>
<p>静态查看 net.sqlcipher.database.SQLiteOpenHelper类下的方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android hooking list class_methods net.sqlcipher.database.SQLiteOpenHelper</span><br></pre></td></tr></table></figure><br><img src="/2022/03/23/objection/txs5.png" alt="静态查看"></p>
<p>动态查看 net.sqlcipher.database.SQLiteOpenHelper类下的方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">plugin load &#x2F;root&#x2F;Desktop&#x2F;Wallbreaker</span><br><span class="line">plugin wallbreaker classdump --fullname net.sqlcipher.database.SQLiteOpenHelper</span><br></pre></td></tr></table></figure><br><img src="/2022/03/23/objection/txs6.png" alt="动态查看"></p>
<ol>
<li>hook net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase</li>
<li>寻找MainActivity的实例</li>
<li>主动调用MainActivity的实例的a方法<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">android hooking watch class_method net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase --dump-args --dump-backtrace --dump-return </span><br><span class="line">android heap search instances com.example.yaphetshan.tencentwelcome.MainActivity</span><br><span class="line">android heap execute 0x100bda a</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/2022/03/23/objection/txs7.png" alt="主动调用"></p>
<p>DB Browser for SQLite 打开数据库 输入密码 ae56f99</p>
<p><img src="/2022/03/23/objection/txs8.png" alt="打开数据库"><br><img src="/2022/03/23/objection/txs9.png" alt="flag结果"></p>
<hr>
<h5 id="frida-hook"><a href="#frida-hook" class="headerlink" title="frida hook"></a>frida hook</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// hook 重载 </span></span><br><span class="line">        Java.use(<span class="string">"net.sqlcipher.database.SQLiteOpenHelper"</span>).getWritableDatabase.overload(<span class="string">'java.lang.String'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.getWritableDatabase(x);</span><br><span class="line">            <span class="comment">// 调用栈</span></span><br><span class="line">            <span class="built_in">console</span>.log(Java.use(<span class="string">"android.util.Log"</span>).getStackTraceString(Java.use(<span class="string">"java.lang.Throwable"</span>).$<span class="keyword">new</span>()));</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"xString,result"</span>,x,result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">        Java.use(<span class="string">"net.sqlcipher.database.SQLiteOpenHelper"</span>).getWritableDatabase.overload(<span class="string">'[C'</span>).implementation = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> result = <span class="keyword">this</span>.getWritableDatabase(x);</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"xCharSe,result"</span>,x,result);</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;)      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 调用实例，主动调用方法</span></span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Java.choose(<span class="string">"com.example.yaphetshan.tencentwelcome.MainActivity"</span>,&#123;</span><br><span class="line">            onMatch:<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"found insttance "</span>,instance);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"invoke instance.a "</span>,instance.a());</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"search completed !"</span>)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/23/objection/txs10.png" alt="frida hook"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>objection</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓逆向基础之抓包</title>
    <url>/2022/03/13/%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<p>记录一些安卓抓包的工具</p>
<h3 id="一-Charles-抓包"><a href="#一-Charles-抓包" class="headerlink" title="一. Charles 抓包"></a>一. Charles 抓包</h3><h4 id="1-charles-设置"><a href="#1-charles-设置" class="headerlink" title="1.charles 设置"></a>1.charles 设置</h4><p><a href="https://www.charlesproxy.com/download/" target="_blank" rel="noopener">charles安装网址</a></p>
<h5 id="proxy-—-gt-ssl-proxying-settings-—-gt-add-—-gt-设置"><a href="#proxy-—-gt-ssl-proxying-settings-—-gt-add-—-gt-设置" class="headerlink" title="proxy —&gt; ssl proxying settings —&gt; add —&gt; 设置 "></a>proxy —&gt; ssl proxying settings —&gt; add —&gt; 设置<em> </em></h5><p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img.png" alt="ssl设置"></p>
<h5 id="proxy-—-gt-ssl-settings"><a href="#proxy-—-gt-ssl-settings" class="headerlink" title="proxy —&gt; ssl settings"></a>proxy —&gt; ssl settings</h5><p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img_1.png" alt="img_1.png"></p>
<h4 id="2-手机设置"><a href="#2-手机设置" class="headerlink" title="2.手机设置"></a>2.手机设置</h4><h4 id="手机-WiFi设置http代理-在同一局域网"><a href="#手机-WiFi设置http代理-在同一局域网" class="headerlink" title="手机 WiFi设置http代理,在同一局域网"></a>手机 WiFi设置http代理,在同一局域网</h4><p>1.先查看电脑ip<br><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img_2.png" alt="img_2.png"><br>2.wifi —&gt; 修改网络 —&gt; 高级选项 —&gt; 代理 —&gt; 手动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在可以抓到http的包，但是https抓不到</span><br></pre></td></tr></table></figure></p>
<p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img_3.png" alt="img_3.png"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器输入 chls.pro&#x2F;ssl 下载证书，安装</span><br><span class="line">这样就可以抓到https的包了,百度一下就知道了 </span><br><span class="line">现在抓爱奇艺APP登录的包 抓不到, 那我们继续证书装到系统目录</span><br></pre></td></tr></table></figure></p>
<h4 id="3-将证书安装到系统目录"><a href="#3-将证书安装到系统目录" class="headerlink" title="3.将证书安装到系统目录"></a>3.将证书安装到系统目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect 192.168.31.88</span><br><span class="line">abd shell</span><br><span class="line">su</span><br><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added</span><br><span class="line">mount -o remount,rw &#x2F;system</span><br><span class="line">ls -alist 看哪个是最新安装的</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/charles.png" alt="证书安装到根目录"></p>
<h4 id="4-vpn软件-postern-设置"><a href="#4-vpn软件-postern-设置" class="headerlink" title="4.vpn软件 postern 设置"></a>4.vpn软件 postern 设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postern  设置配置代理，配置规则</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/p1.png" alt="配置代理"><br><img src="/2022/03/13/%E6%8A%93%E5%8C%85/p2.png" alt="配置规则"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">但是安卓10 系统不能分区  需要用 magisk的MoveCertificates模块，会自动帮我们将证书安装到系统目录 https:&#x2F;&#x2F;blog.csdn.net&#x2F;fjh1997&#x2F;article&#x2F;details&#x2F;106756012</span><br><span class="line">postern 在安卓10上也不好使</span><br></pre></td></tr></table></figure>
<h4 id="另一个vpn软件-SagerNet"><a href="#另一个vpn软件-SagerNet" class="headerlink" title="另一个vpn软件 SagerNet"></a>另一个vpn软件 SagerNet</h4><p><a href="https://blog.seeflower.dev/archives/70/" target="_blank" rel="noopener">SagerNet</a></p>
<h4 id="5-双向验证例子-全国同一信用代码app"><a href="#5-双向验证例子-全国同一信用代码app" class="headerlink" title="5.双向验证例子 全国同一信用代码app"></a>5.双向验证例子 全国同一信用代码app</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将charles证书安装到系统,使用vpn 软件也不能抓到包，这是为什么？</span><br><span class="line">服务器验证客户端证书</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img4.jpg" alt="未抓到"><br>frida下载app 证书 dump_certificate.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uuid</span>(<span class="params">len, radix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chars = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> uuid = [], i;</span><br><span class="line">    radix = radix || chars.length;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (len) &#123;</span><br><span class="line">      <span class="comment">// Compact form</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) uuid[i] = chars[<span class="number">0</span> | <span class="built_in">Math</span>.random() * radix];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// rfc4122, version 4 form</span></span><br><span class="line">      <span class="keyword">var</span> r;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// rfc4122 requires these characters</span></span><br><span class="line">      uuid[<span class="number">8</span>] = uuid[<span class="number">13</span>] = uuid[<span class="number">18</span>] = uuid[<span class="number">23</span>] = <span class="string">'-'</span>;</span><br><span class="line">      uuid[<span class="number">14</span>] = <span class="string">'4'</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// Fill in random data. At i==19 set the high bits of clock sequence as</span></span><br><span class="line">      <span class="comment">// per rfc4122, sec. 4.1.5</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!uuid[i]) &#123;</span><br><span class="line">          r = <span class="number">0</span> | <span class="built_in">Math</span>.random() * <span class="number">16</span>;</span><br><span class="line">          uuid[i] = chars[(i == <span class="number">19</span>) ? (r &amp; <span class="number">0x3</span>) | <span class="number">0x8</span> : r];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> uuid.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">storeP12</span>(<span class="params">pri, p7, p12Path, p12Password</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> X509Certificate = Java.use(<span class="string">"java.security.cert.X509Certificate"</span>)</span><br><span class="line">            <span class="keyword">var</span> p7X509 = Java.cast(p7, X509Certificate);</span><br><span class="line">            <span class="keyword">var</span> chain = Java.array(<span class="string">"java.security.cert.X509Certificate"</span>, [p7X509])</span><br><span class="line">            <span class="keyword">var</span> ks = Java.use(<span class="string">"java.security.KeyStore"</span>).getInstance(<span class="string">"PKCS12"</span>, <span class="string">"BC"</span>);</span><br><span class="line">            ks.load(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            ks.setKeyEntry(<span class="string">"client"</span>, pri, Java.use(<span class="string">'java.lang.String'</span>).$<span class="keyword">new</span>(p12Password).toCharArray(), chain);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> out = Java.use(<span class="string">"java.io.FileOutputStream"</span>).$<span class="keyword">new</span>(p12Path);</span><br><span class="line">              ks.store(out, Java.use(<span class="string">'java.lang.String'</span>).$<span class="keyword">new</span>(p12Password).toCharArray())</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">"dump success!"</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exp) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(exp)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          <span class="comment">//在服务器校验客户端的情形下，帮助dump客户端证书，并保存为p12的格式，证书密码为mmb</span></span><br><span class="line">          Java.use(<span class="string">"java.security.KeyStore$PrivateKeyEntry"</span>).getPrivateKey.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.getPrivateKey()</span><br><span class="line">            <span class="keyword">var</span> packageName = Java.use(<span class="string">"android.app.ActivityThread"</span>).currentApplication().getApplicationContext().getPackageName();</span><br><span class="line">            storeP12(<span class="keyword">this</span>.getPrivateKey(), <span class="keyword">this</span>.getCertificate(), <span class="string">'/sdcard/Download/'</span> + packageName + uuid(<span class="number">10</span>, <span class="number">16</span>) + <span class="string">'.p12'</span>, <span class="string">'mmb'</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">          &#125;</span><br><span class="line">          Java.use(<span class="string">"java.security.KeyStore$PrivateKeyEntry"</span>).getCertificateChain.implementation = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">this</span>.getCertificateChain()</span><br><span class="line">            <span class="keyword">var</span> packageName = Java.use(<span class="string">"android.app.ActivityThread"</span>).currentApplication().getApplicationContext().getPackageName();</span><br><span class="line">            storeP12(<span class="keyword">this</span>.getPrivateKey(), <span class="keyword">this</span>.getCertificate(), <span class="string">'/sdcard/Download/'</span> + packageName + uuid(<span class="number">10</span>, <span class="number">16</span>) + <span class="string">'.p12'</span>, <span class="string">'mmb'</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将手机上的证书pull电脑上，charles安装证书，成功到包</span><br></pre></td></tr></table></figure><br><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img5.jpg" alt="charles 安装证书"><br><img src="/2022/03/13/%E6%8A%93%E5%8C%85/img6.jpg" alt="成功抓到包"></p>
<h3 id="二-mitmproxy"><a href="#二-mitmproxy" class="headerlink" title="二.mitmproxy"></a>二.mitmproxy</h3><p>mitmproxy电脑环境安装 参考崔庆才的博客,<a href="https://cuiqingcai.com/5391.html" target="_blank" rel="noopener">mitmproxy安装</a></p>
<h4 id="逍遥模拟器手机安装证书"><a href="#逍遥模拟器手机安装证书" class="headerlink" title="逍遥模拟器手机安装证书"></a>逍遥模拟器手机安装证书</h4><ol>
<li>电脑运行 mitmdump -p 8999  (端口号随意，不要冲突即可)</li>
<li>查看电脑ip Windows(ipconfig),Liunx(ifconfig)</li>
<li>电脑手机在同一局域网内，手机Wifi设置代理 <img src="/2022/03/13/%E6%8A%93%E5%8C%85/mitmproxy_1.png" alt="设置代理"></li>
<li>在浏览器输入mitm.it，下载证书<img src="/2022/03/13/%E6%8A%93%E5%8C%85/mitmproxy_2.png" alt="下载证书"></li>
<li>安装证书</li>
<li><p>当安装证书还是不行，抓不到数据需要把证书安装到跟目录下<br> <img src="/2022/03/13/%E6%8A%93%E5%8C%85/mitmproxy_0.jpg" alt="参考"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb connect 192.168.31.216</span><br><span class="line">adb shell</span><br><span class="line">cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added</span><br><span class="line">mount -o rw,remount &#x2F;system (安卓7，模拟器是安卓7，安卓8不一样mount -o remount,rw &#x2F;)</span><br><span class="line">chmod 777 *</span><br><span class="line">cp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mt.py 将带有aweme/v1/store/product/list链接的数据保存到redis</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">REDIS_HOST = <span class="string">"REDIS_HOST"</span></span><br><span class="line">REDIS_PORT = <span class="number">63791</span></span><br><span class="line">REDIS_ENCODING = <span class="string">'utf-8'</span></span><br><span class="line">red = Redis(host=REDIS_HOST, port=REDIS_PORT, password=<span class="string">"password"</span>, db=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span><span class="params">(flow)</span>:</span></span><br><span class="line">    response_data = flow.response</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'aweme/v1/store/product/list'</span> <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        json_data = json.loads(response_data.text)</span><br><span class="line">        print(json_data)</span><br><span class="line">        red.rpush(<span class="string">'dy:items'</span>, json.dumps(json_data))</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开启mitmproxy  mitmdump -s mt.py -p 8999 </span><br><span class="line">手机WIFI设置代理 (如果前面做了可以省略)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="三-HttpCanary"><a href="#三-HttpCanary" class="headerlink" title="三.HttpCanary"></a>三.HttpCanary</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HttpCanary支持对HTTP协议包的抓取和注入。使用这款App，您将能够非常非常方便的测试Rest API接口请求。同时，HttpCanary提供了各式各样的数据浏览功能，比如Raw视图、Hex视图、Json视图等等。</span><br></pre></td></tr></table></figure>
<h3 id="四-HTTP-Toolkit"><a href="#四-HTTP-Toolkit" class="headerlink" title="四.HTTP Toolkit"></a>四.<a href="https://httptoolkit.tech/" target="_blank" rel="noopener">HTTP Toolkit</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、下载它的pc端,window和 mac的都有。</span><br><span class="line">2、下载它的Android App安装</span><br><span class="line">3、PC端上点击 Android device via QR code,出现一个二维码</span><br><span class="line">4、Android 端扫描这个二维码,会自动 开启vpn,然后提示你安装证书,（Android7以上要装magisk的Move Certificates,把证书搞到系统证书区, 重启就生效）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
</search>
